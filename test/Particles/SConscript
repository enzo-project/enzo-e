Import('env')
Import('parallel_run')
Import('serial_run')
Import('ip_charm')

Import('bin_path')
Import('test_path')

#----------------------------------------------------------
#defines
#----------------------------------------------------------

env['CPIN'] = 'touch parameters.out; mv parameters.out ${TARGET}.in'
env['RMIN'] = 'rm -f parameters.out'
env['clocal_cmd'] = '++local'


date_cmd = 'echo $TARGET > test/STATUS; echo "---------------------"; date +"%Y-%m-%d %H:%M:%S";'

make_movie = Builder(action = "png2swf -r 5 -o $TARGET ${ARGS} ")
png_to_gif = Builder(action = "convert -delay 5 -loop 0 ${ARGS} $TARGET ")

env.Append(BUILDERS = { 'MakeMovie' : make_movie})
env.Append(BUILDERS = { 'pngToGif'  : png_to_gif})




run_particle_x = Builder(action = "$RMIN; " + date_cmd + parallel_run + " $SOURCE $clocal_cmd  $ARGS " + " > $TARGET 2>&1; $CPIN; $COPY")
env.Append(BUILDERS = { 'RunParticleX' : run_particle_x } )
env_mv_particle_x = env.Clone(COPY = 'mkdir -p ' + test_path + '/Particles/ParticleX; mv `ls *.png *.h5` ' + test_path + '/Particles/ParticleX')

run_particle_y = Builder(action = "$RMIN; " + date_cmd + parallel_run + " $SOURCE $clocal_cmd  $ARGS " + " > $TARGET 2>&1; $CPIN; $COPY")
env.Append(BUILDERS = { 'RunParticleY' : run_particle_y } )
env_mv_particle_y = env.Clone(COPY = 'mkdir -p ' + test_path + '/Particles/ParticleY; mv `ls *.png *.h5` ' + test_path + '/Particles/ParticleY')

run_particle_xy = Builder(action = "$RMIN; " + date_cmd + parallel_run + " $SOURCE $clocal_cmd  $ARGS " + " > $TARGET 2>&1; $CPIN; $COPY")
env.Append(BUILDERS = { 'RunParticleXY' : run_particle_xy } )
env_mv_particle_xy = env.Clone(COPY = 'mkdir -p ' + test_path + '/Particles/ParticleXY; mv `ls *.png *.h5` ' + test_path + '/Particles/ParticleXY')

run_particle_circle = Builder(action = "$RMIN; " + date_cmd + parallel_run + " $SOURCE $clocal_cmd  $ARGS " + " > $TARGET 2>&1; $CPIN; $COPY")
env.Append(BUILDERS = { 'RunParticleCircle' : run_particle_circle } )
env_mv_particle_circle = env.Clone(COPY = 'mkdir -p ' + test_path + '/Particles/ParticleCircle; mv `ls *.png *.h5` ' + test_path + '/Particles/ParticleCircle')

run_particle_amr_static = Builder(action = "$RMIN; " + date_cmd + parallel_run + " $SOURCE $clocal_cmd  $ARGS " + " > $TARGET 2>&1; $CPIN; $COPY")
env.Append(BUILDERS = { 'RunParticleAmrStatic' : run_particle_amr_static } )
env_mv_particle_amr_static = env.Clone(COPY = 'mkdir -p ' + test_path + '/Particles/ParticleAmrStatic; mv `ls *.png *.h5` ' + test_path + '/Particles/ParticleAmrStatic')

run_particle_amr_dynamic = Builder(action = "$RMIN; " + date_cmd + parallel_run + " $SOURCE $clocal_cmd  $ARGS " + " > $TARGET 2>&1; $CPIN; $COPY")
env.Append(BUILDERS = { 'RunParticleAmrDynamic' : run_particle_amr_dynamic } )
env_mv_particle_amr_dynamic = env.Clone(COPY = 'mkdir -p ' + test_path + '/Particles/ParticleAmrDynamic; mv `ls *.png *.h5` ' + test_path + '/Particles/ParticleAmrDynamic')






#-------------------------------------------------------------
#load balancing
#-------------------------------------------------------------






balance_particle_x = env_mv_particle_x.RunParticleX (
     'test_particle-x.unit',
     bin_path + '/enzo-e',
     ARGS='input/Particle/test_particle-x.in')

Clean(balance_particle_x,
     [Glob('#/' + test_path + '/ParticleX/particle-x.png')])


env.PngToGif("/ParticleX/particle-x.gif", "test_particle-x.unit", \
              ARGS = test_path + "/Particles/ParticleX/particle-x*.png");


balance_particle_y = env_mv_particle_y.RunParticleY (
     'test_particle-y.unit',
     bin_path + '/enzo-e',
     ARGS='input/Particle/test_particle-y.in')

Clean(balance_particle_y,
     [Glob('#/' + test_path + '/ParticleY/particle-y.png')])


env.PngToGif("/ParticleY/particle-y.gif", "test_particle-y.unit", \
              ARGS = test_path + "/Particles/ParticleY/particle-y*.png");

balance_particle_xy = env_mv_particle_xy.RunParticleXY (
     'test_particle-xy.unit',
     bin_path + '/enzo-e',
     ARGS='input/Particle/test_particle-xy.in')

Clean(balance_particle_xy,
     [Glob('#/' + test_path + '/ParticleXY/particle-xy.png')])


env.PngToGif("/ParticleXY/particle-xy.gif", "test_particle-xy.unit", \
              ARGS = test_path + "/Particles/ParticleXY/particle-xy*.png");

balance_particle_circle = env_mv_particle_circle.RunParticleCircle (
     'test_particle-circle.unit',
     bin_path + '/enzo-e',
     ARGS='input/Particle/test_particle-circle.in')

Clean(balance_particle_circle,
     [Glob('#/' + test_path + '/ParticleCircle/particle-circle.png')])


env.PngToGif("/ParticleCircle/particle-circle.gif", "test_particle-circle.unit", \
              ARGS = test_path + "/Particles/ParticleCircle/particle-circle*.png");

balance_particle_amr_static = env_mv_particle_amr_static.RunParticleAmrStatic (
     'test_particle-amr-static.unit',
     bin_path + '/enzo-e',
     ARGS='input/Particle/test_particle-amr-static.in')

Clean(balance_particle_amr_static,
     [Glob('#/' + test_path + '/ParticleAmrStatic/particle-amr-static.png')])


env.PngToGif("/ParticleAmrStatic/particle-amr-static.gif", "test_particle-amr-static.unit", \
              ARGS = test_path + "/Particles/ParticleAmrStatic/particle-amr-static*.png");


balance_particle_amr_dynamic = env_mv_particle_amr_dynamic.RunParticleAmrDynamic (
     'test_particle-amr-dynamic.unit',
     bin_path + '/enzo-e',
     ARGS='input/Particle/test_particle-amr-dynamic.in')

Clean(balance_particle_amr_dynamic,
     [Glob('#/' + test_path + '/ParticleAmrDynamic/particle-amr-dynamic.png')])


env.PngToGif("/ParticleAmrDynamic/particle-amr-dynamic.gif", "test_particle-amr-dynamic.unit", \
              ARGS = test_path + "/Particles/ParticleAmrDynamic/particle-amr-dynamic*.png");
