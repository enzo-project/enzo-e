
Import('env')
Import('parallel_run')
Import('serial_run')
Import('ip_charm')
Import('bin_path')
Import('test_path')

#---------------------------------------------------------
# defines
#---------------------------------------------------------

env['CPIN'] = 'touch parameters.out; mv parameters.out ${TARGET}.in'
env['RMIN'] = 'rm -f parameters.out'

date_cmd = 'echo $TARGET > test/STATUS; echo "-------------------"; date +"%Y-%m-%d %H:%M:%S";'

run_schedule=Builder(action = "$RMIN; " + date_cmd + serial_run + " $SOURCE $ARGS > $TARGET 2>&1; $CPIN; $COPY")
env.Append(BUILDERS = { 'RunSchedule' : run_schedule})
env_mv_schedule = env.Clone(COPY = 'mkdir -p ' + test_path + '/IOComponent/Schedule; mv `ls *.png *.h5` ' + test_path + '/IOComponent/Schedule')

run_colormap=Builder(action = "$RMIN; " + date_cmd + serial_run + " $SOURCE $ARGS > $TARGET 2>&1; $CPIN; $COPY")
env.Append(BUILDERS = { 'RunColormap' : run_colormap})
env_mv_colormap = env.Clone(COPY = 'mkdir -p ' + test_path + '/IOComponent/Colormap; mv `ls *.png *.h5` ' + test_path + '/IOComponent/Colormap')




#---------------------------------------------------------
# Load Balancing
#---------------------------------------------------------

#ScheduleLB

balance_schedule = env_mv_schedule.RunSchedule(
    'test_Schedule.unit',
    bin_path + '/test_Schedule')


balance_colormap = env_mv_colormap.RunColormap(
    'test_Colormap.unit',
    bin_path + '/test_Colormap')

#test missing
#env_mv_it_reduce.RunItReduce(
#     'test_ItReduce.unit',
#     bin_path + '/test_ItReduce')