Import('env')
Import('parallel_run')
Import('parallel_arg')
Import('serial_run')
Import('ip_charm')
Import('bin_path')
Import('test_path')
Import('prec')

import os

env['COPY'] = ''
env['CPIN'] = 'touch parameters.out; mv parameters.out ${TARGET}.in'
env['RMIN'] = 'rm -f parameters.out parameters.libconfig'
# env['ASAN_SYMBOLIZER_PATH'] = '/usr/bin/llvm-symbolizer-3.4'
# env['ASAN_OPTIONS'] = 'symbolize=1'


charm_args = os.getenv('CHARM_ARGS','')
if (charm_args != ""): parallel_arg = charm_args

# Define a test for running unit tests

date_cmd = 'echo "-------------------"; date +"%Y-%m-%d %H:%M:%S";'
hdf5_to_png  = Builder(action = 'test/cello-h5topng.sh $ARGS; mv *.png test');
copy_bin     = Builder(action = "cp $SOURCE $ARGS");
run_serial   = Builder(action = "$RMIN; echo $TARGET > test/STATUS;" + date_cmd + serial_run   +  "$SOURCE $ARGS> $TARGET 2>&1; $CPIN; $COPY")
run_parallel = Builder(action = "$RMIN; echo $TARGET > test/STATUS;" + date_cmd + parallel_run + " $SOURCE " + parallel_arg + " $ARGS " + " > $TARGET 2>&1; $CPIN; $COPY")

png_to_gif   = Builder(action = "convert -delay 5 -loop 0 ${ARGS} $TARGET ")

env.Append(BUILDERS = { 'RunSerial'   : run_serial } )
env.Append(BUILDERS = { 'RunParallel' : run_parallel } )
env.Append(BUILDERS = { 'Hdf5ToPng'   : hdf5_to_png } )
env.Append(BUILDERS = { 'PngToGif'    : png_to_gif } )

env_mv_out  = env.Clone(COPY = 'mv -f *.png *.h5 Dir_* ' + test_path)
env_mv_test = env.Clone(COPY = 'mv -f test*out test*in ' + test_path)
env_rm_png  = env.Clone(COPY = 'rm -f *.png')

enzo_bin = bin_path + '/enzo-e'

# h5topng

#----------------------------------------------------------------------
SConscript('Balance/SConscript')
#----------------------------------------------------------------------

#----------------------------------------------------------------------
# ARRAY COMPONENT
#----------------------------------------------------------------------
SConscript('ArrayComponent/SConscript')

#----------------------------------------------------------------------
# DATA COMPONENT
#----------------------------------------------------------------------
#----------------------------------------------------------------------
SConscript('DataComponent/SConscript')
#----------------------------------------------------------------------

#----------------------------------------------------------------------
# ERROR COMPONENT
#----------------------------------------------------------------------
#----------------------------------------------------------------------
SConscript('ErrorComponent/SConscript')
#----------------------------------------------------------------------

#----------------------------------------------------------------------
#INITIAL COMPONENT
#----------------------------------------------------------------------
SConscript('InitialComponent/SConscript')

#----------------------------------------------------------------------
# IOCOMPONENT
#----------------------------------------------------------------------
SConscript('IOComponent/SConscript')

#----------------------------------------------------------------------
# MEMORY COMPONENT
#----------------------------------------------------------------------
#----------------------------------------------------------------------
SConscript('MemoryComponent/SConscript')

#----------------------------------------------------------------------
# METHOD Gravity TESTS
#----------------------------------------------------------------------
SConscript('MethodGravity/SConscript')

#----------------------------------------------------------------------
# METHOD COSMOLOGY TESTS
#----------------------------------------------------------------------
SConscript('MethodCosmology/SConscript')

#----------------------------------------------------------------------
# METHOD HEAT TESTS
#----------------------------------------------------------------------
SConscript('MethodHeat/SConscript')

#----------------------------------------------------------------------
# METHOD PPM TESTS
#----------------------------------------------------------------------
SConscript('MethodPpm/SConscript')

#----------------------------------------------------------------------
# SERIAL RESTART
#----------------------------------------------------------------------
SConscript('Restart/SConscript')

#----------------------------------------------------------------------
# BOUNDARY CONDITIONS
#----------------------------------------------------------------------
SConscript('BoundaryConditions/SConscript')

#----------------------------------------------------------------------
# MESH GENERATION
#----------------------------------------------------------------------
SConscript('MeshGeneration/SConscript')

#----------------------------------------------------------------------
# AMRPPM
#----------------------------------------------------------------------
SConscript('AmrPpm/SConscript')

#----------------------------------------------------------------------
#PERFORMANCE
#----------------------------------------------------------------------
SConscript('Performance/SConscript')

#----------------------------------------------------------------------
# OUTPUT
#----------------------------------------------------------------------
SConscript('Output/SConscript')

#----------------------------------------------------------------------
# PARTICLES
#----------------------------------------------------------------------
SConscript('Particles/SConscript')

#----------------------------------------------------------------------
# CELLO
#----------------------------------------------------------------------
SConscript('Cello/SConscript')

#----------------------------------------------------------------------
# UnitsComponent
#----------------------------------------------------------------------
SConscript('UnitsComponent/SConscript')




#prevent concurrent running of Parallel tests

SideEffect('log.txt',
     ['method_ppm-1.unit',
      'method_ppm-8.unit'])


env.Clean('.',Glob('test_*.in'))
env.Clean('.',Glob('*/test_*.in'))
