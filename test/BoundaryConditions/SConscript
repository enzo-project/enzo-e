Import('env')
Import('parallel_run')
Import('serial_run')
Import('ip_charm')

Import('bin_path')
Import('test_path')

#----------------------------------------------------------
#defines
#----------------------------------------------------------

env['CPIN'] = 'touch parameters.out; mv parameters.out ${TARGET}.in'
env['RMIN'] = 'rm -f parameters.out'
env['clocal_cmd'] = '++local'


date_cmd = 'echo $TARGET > test/STATUS; echo "---------------------"; date +"%Y-%m-%d %H:%M:%S";'

make_movie = Builder(action = "png2swf -r 5 -o $TARGET ${ARGS} ")
png_to_gif = Builder(action = "convert -delay 5 -loop 0 ${ARGS} $TARGET ")

env.Append(BUILDERS = { 'MakeMovie' : make_movie})
env.Append(BUILDERS = { 'pngToGif'  : png_to_gif})




run_reflecting_2d = Builder(action = "$RMIN; " + date_cmd + parallel_run + " $SOURCE $clocal_cmd  $ARGS " + " > $TARGET 2>&1; $CPIN; $COPY")
env.Append(BUILDERS = { 'RunReflecting2d' : run_reflecting_2d } )
env_mv_reflecting_2d = env.Clone(COPY = 'mkdir -p ' + test_path + '/BoundaryConditions/Reflecting-2D; mv `ls *.png *.h5` ' + test_path + '/BoundaryConditions/Reflecting-2D')

run_periodic_2d = Builder(action = "$RMIN; " + date_cmd + parallel_run + " $SOURCE $clocal_cmd  $ARGS " + " > $TARGET 2>&1; $CPIN; $COPY")
env.Append(BUILDERS = { 'RunPeriodic2d' : run_periodic_2d } )
env_mv_periodic_2d = env.Clone(COPY = 'mkdir -p ' + test_path + '/BoundaryConditions/Periodic-2D; mv `ls *.png *.h5` ' + test_path + '/BoundaryConditions/Periodic-2D')

run_outflow_2d = Builder(action = "$RMIN; " + date_cmd + parallel_run + " $SOURCE $clocal_cmd  $ARGS " + " > $TARGET 2>&1; $CPIN; $COPY")
env.Append(BUILDERS = { 'RunOutflow2d' : run_outflow_2d } )
env_mv_outflow_2d = env.Clone(COPY = 'mkdir -p ' + test_path + '/BoundaryConditions/Outflow-2D; mv `ls *.png *.h5` ' + test_path + '/BoundaryConditions/Outflow-2D')


run_reflecting_3d = Builder(action = "$RMIN; " + date_cmd + parallel_run + " $SOURCE $clocal_cmd  $ARGS " + " > $TARGET 2>&1; $CPIN; $COPY")
env.Append(BUILDERS = { 'RunReflecting3d' : run_reflecting_3d } )
env_mv_reflecting_3d = env.Clone(COPY = 'mkdir -p ' + test_path + '/BoundaryConditions/Reflecting-3D; mv `ls *.png *.h5` ' + test_path + '/BoundaryConditions/Reflecting-3D')

run_periodic_3d = Builder(action = "$RMIN; " + date_cmd + parallel_run + " $SOURCE $clocal_cmd  $ARGS " + " > $TARGET 2>&1; $CPIN; $COPY")
env.Append(BUILDERS = { 'RunPeriodic3d' : run_periodic_3d } )
env_mv_periodic_3d = env.Clone(COPY = 'mkdir -p ' + test_path + '/BoundaryConditions/Periodic-3D; mv `ls *.png *.h5` ' + test_path + '/BoundaryConditions/Periodic-3D')

run_outflow_3d = Builder(action = "$RMIN; " + date_cmd + parallel_run + " $SOURCE $clocal_cmd  $ARGS " + " > $TARGET 2>&1; $CPIN; $COPY")
env.Append(BUILDERS = { 'RunOutflow3d' : run_outflow_3d } )
env_mv_outflow_3d = env.Clone(COPY = 'mkdir -p ' + test_path + '/BoundaryConditions/Outflow-3D; mv `ls *.png *.h5` ' + test_path + '/BoundaryConditions/Outflow-3D')



#-------------------------------------------------------------
#load balancing
#-------------------------------------------------------------
#2D boundary tests

boundary_reflecting_2d = env_mv_reflecting_2d.RunReflecting2d (
     'test_boundary_reflecting-2d.unit',
     bin_path + '/enzo-e',
     ARGS='input/Boundary/boundary_reflecting-2d.in')

Clean(boundary_reflecting_2d,
     [Glob('#/' + test_path + '/Reflecting-2D/boundary_reflecting-2d.png'),
      'test_boundary_reflecting-2d.unit'])

boundary_periodic_2d = env_mv_periodic_2d.RunPeriodic2d (
     'test_boundary_periodic-2d.unit',
     bin_path + '/enzo-e',
     ARGS='input/Boundary/boundary_periodic-2d.in')

Clean(boundary_periodic_2d,
     [Glob('#/' + test_path + '/Periodic-2D/boundary_periodic-2d.png'),
      'test_boundary_periodic-2d.unit'])

boundary_outflow_2d = env_mv_outflow_2d.RunOutflow2d (
     'test_boundary_outflow-2d.unit',
     bin_path + '/enzo-e',
     ARGS='input/Boundary/boundary_outflow-2d.in')

Clean(boundary_outflow_2d,
     [Glob('#/' + test_path + '/Outflow-2D/boundary_outflow-2d.png'),
      'test_boundary_outflow-2d.unit'])




env.MakeMovie("/Reflecting-2D/boundary_reflecting-2d.swf", "test_boundary_reflecting-2d.unit", \
              ARGS = test_path + "/BoundaryConditions/Reflecting-2D/boundary_reflecting-2d-????.png");
env.PngToGif("/Reflecting-2D/boundary_reflecting-2d.gif", "test_boundary_reflecting-2d.unit", \
              ARGS = test_path + "/BoundaryConditions/Reflecting-2D/boundary_reflecting-2d-????.png");
env.MakeMovie("/Periodic-2D/boundary_periodic-2d.swf", "test_boundary_periodic-2d.unit", \
              ARGS = test_path + "/BoundaryConditions/Periodic-2D/boundary_periodic-2d-????.png");
env.PngToGif("/Periodic-2D/boundary_periodic-2d.gif", "test_boundary_periodic-2d.unit", \
              ARGS = test_path + "/BoundaryConditions/Periodic-2D/boundary_periodic-2d-????.png");
env.MakeMovie("/Outflow-2D/boundary_outflow-2d.swf", "test_boundary_outflow-2d.unit", \
              ARGS = test_path + "/BoundaryConditions/Outflow-2D/boundary_outflow-2d-????.png");
env.PngToGif("/Outflow-2D/boundary_outflow-2d.gif", "test_boundary_outflow-2d.unit", \
              ARGS = test_path + "/BoundaryConditions/Outflow-2D/boundary_outflow-2d-????.png");





#3D boundary tests


boundary_reflecting_3d = env_mv_reflecting_3d.RunReflecting3d (
     'test_boundary_reflecting-3d.unit',
     bin_path + '/enzo-e',
     ARGS='input/Boundary/boundary_reflecting-3d.in')

Clean(boundary_reflecting_3d,
     [Glob('#/' + test_path + '/Reflecting-3D/boundary_reflecting-3d.png'),
      'test_boundary_reflecting-3d.unit'])

boundary_periodic_3d = env_mv_periodic_3d.RunPeriodic3d (
     'test_boundary_periodic-3d.unit',
     bin_path + '/enzo-e',
     ARGS='input/Boundary/boundary_periodic-3d.in')

Clean(boundary_periodic_3d,
     [Glob('#/' + test_path + '/Periodic-3D/boundary_periodic-3d.png'),
      'test_boundary_periodic-3d.unit'])

boundary_outflow_3d = env_mv_outflow_3d.RunOutflow3d (
     'test_boundary_outflow-3d.unit',
     bin_path + '/enzo-e',
     ARGS='input/Boundary/boundary_outflow-3d.in')

Clean(boundary_outflow_3d,
     [Glob('#/' + test_path + '/Outflow-3D/boundary_outflow-3d.png'),
      'test_boundary_outflow-3d.unit'])




env.MakeMovie("/Reflecting-3D/boundary_reflecting-3d.swf", "test_boundary_reflecting-3d.unit", \
              ARGS = test_path + "/BoundaryConditions/Reflecting-3D/boundary_reflecting-3d-????.png");
env.PngToGif("/Reflecting-3D/boundary_reflecting-3d.gif", "test_boundary_reflecting-3d.unit", \
              ARGS = test_path + "/BoundaryConditions/Reflecting-3D/boundary_reflecting-3d-????.png");
env.MakeMovie("/Periodic-3D/boundary_periodic-3d.swf", "test_boundary_periodic-3d.unit", \
              ARGS = test_path + "/BoundaryConditions/Periodic-3D/boundary_periodic-3d-????.png");
env.PngToGif("/Periodic-3D/boundary_periodic-3d.gif", "test_boundary_periodic-3d.unit", \
              ARGS = test_path + "/BoundaryConditions/Periodic-3D/boundary_periodic-3d-????.png");
env.MakeMovie("/Outflow-3D/boundary_outflow-3d.swf", "test_boundary_outflow-3d.unit", \
              ARGS = test_path + "/BoundaryConditions/Outflow-3D/boundary_outflow-3d-????.png");
env.PngToGif("/Outflow-3D/boundary_outflow-3d.gif", "test_boundary_outflow-3d.unit", \
              ARGS = test_path + "/BoundaryConditions/Outflow-3D/boundary_outflow-3d-????.png");


#----------------------------------------------------

