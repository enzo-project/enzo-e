import argparse
import os.path

_output_template ="""\
# Generated by gen_grackle_testing_file.py

include "{include_path}"
Method {{ grackle {{ data_file = "{data_path}"; }} }}\
"""
def generate_grackle_input_file(include_path, data_path,
                                use_abs_paths = True,
                                output_fname = None):
    """
    Generates a parameter file for use in automated Enzo-E tests involving 
    Grackle.

    The resulting file simply has an include directive to include the contents 
    of the file located at include_path and sets the Method:grackle:data_file 
    parameter to data_path (overwriting any previous value).
    """
    prep_path_func = lambda path: path
    if use_abs_paths:
        prep_path_func = os.path.abspath

    output_contents = _output_template.format(
        include_path = prep_path_func(include_path),
        data_path = prep_path_func(data_path)
    )

    if output_fname is not None:
        with open(output_fname, 'w') as f:
            f.write(output_contents)
    return output_contents


_description = """\
Generates a parameter file for use in automated Enzo-E tests involving Grackle.

The resulting file simply includes the contents of INCLUDE_FILE and sets the Method:grackle:data_file to DATA_PATH (overwriting any previous value).
"""

parser = argparse.ArgumentParser(description = _description)

parser.add_argument(
    'INCLUDE_FILE',
    help = 'Path to the input file specifying most parameters'
)
parser.add_argument(
    '-d','--data-path', required = True, help = 'Path to the grackle data file'
)
parser.add_argument(
    '--use-abs-paths', action = 'store_true', default = False,
    help = ('When specified, relative paths are converted to absolute paths. '
            'When omitted, any relative paths should be relative to the '
            'directory from which the parameter file will be read')
)
parser.add_argument(
    '-o', '--output', action = 'store', default = None,
    help = ('Path where the output parameter file is written. '
            'When omitted, the result is printed to STDOUT')
)

if __name__ == '__main__':
    args = parser.parse_args()
    rslt = generate_grackle_input_file(args.INCLUDE_FILE, args.data_path,
                                       use_abs_paths = args.use_abs_paths,
                                       output_fname = args.output)
    if args.output is None:
        print(rslt)
    
