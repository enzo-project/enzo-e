version: 2.1

commands:
  set-env:
    description: "Set environment variables."
    steps:
      - run:
          name: "Set environment variables."
          command: |
            echo 'export CHARM_VER=7.0.0' >> $BASH_ENV
            echo 'export LD_LIBRARY_PATH=$HOME/local/lib:$LD_LIBRARY_PATH' >> $BASH_ENV
            echo 'export HDF5_INC=/usr/include/hdf5/serial' >> $BASH_ENV
            echo 'export HDF5_LIB=/usr/lib/x86_64-linux-gnu' >> $BASH_ENV
            echo 'export CHARM_ROOT=$HOME/local/charm-v$CHARM_VER' >> $BASH_ENV
            echo 'export Grackle_ROOT=$HOME/local' >> $BASH_ENV
            echo 'export CHARM_PATH=$CHARM_ROOT/bin' >> $BASH_ENV
            echo 'export TEST_RESULTS_DIR=$HOME/answer_test_results' >> $BASH_ENV
            # get tags from the main repository (for the current gold standard)
            git fetch --tags https://github.com/enzo-project/enzo-e
            # tag the tip so we can go back to it
            git tag tip

  install-dependencies:
    description: "Install dependencies."
    steps:
      - restore_cache:
          name: "Restore dependencies cache."
          key: dependencies-v3

      - run:
          name: "Install dependencies."
          command: |
            source $BASH_ENV
            sudo apt-get update
            sudo apt-get install -y bc csh libhdf5-serial-dev gfortran libtool-bin libpapi-dev libpng-dev libboost-all-dev pandoc ninja-build cmake
            # apt-get installs hdf5 libraries with _serial
            sudo ln -s /usr/lib/x86_64-linux-gnu/libhdf5_serial.so /usr/lib/x86_64-linux-gnu/libhdf5.so
            # Install charm++
            mkdir -p $HOME/local
            if [ ! -f $HOME/local/charm-v$CHARM_VER/bin/charmrun ]; then
              cd $HOME/local
              wget http://charm.cs.illinois.edu/distrib/charm-$CHARM_VER.tar.gz
              tar xvfz charm-$CHARM_VER.tar.gz
              rm charm-$CHARM_VER.tar.gz
              cd charm-v$CHARM_VER
              ./build charm++ netlrts-linux-x86_64 -j4 --with-production
            fi
            # prepare testing dependencies
            # hdf5-tools is necessary for h5diff which is used by testing
            sudo apt-get install -y hdf5-tools
            python3 -m venv $HOME/venv
            source $HOME/venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade wheel
            pip install --upgrade setuptools
            pip install Cython numpy h5py matplotlib libconf pytest

            # Install yt from source
            git clone https://github.com/yt-project/yt.git $HOME/yt
            cd $HOME/yt
            export MAX_BUILD_CORES=2
            pip install -e .

      - save_cache:
          name: "Save dependencies cache"
          key: dependencies-v3
          paths:
            - ~/local

  install-grackle:
    description: "Install grackle."
    parameters:
      usedouble:
        type: boolean

    steps:
      - run:
          name: "Install grackle."
          command: |
            git clone -b main https://github.com/grackle-project/grackle $HOME/grackle
            cd $HOME/grackle
            ./configure
            cd src/clib
            make machine-linux-gnu
            # convert boolean parameter to an env var storing 0 or 1
            USE_DOUBLE=$(( 0 <<# parameters.usedouble >> + 1 <</ parameters.usedouble >> ))
            if [[ $USE_DOUBLE != 1 ]]; then
              make precision-32
            fi
            make
            make install
            # the grackle_data_files submodule is necessary for testing
            cd ../..
            git submodule update --init

  install-docs-dependencies:
    description: "Install dependencies for docs build."
    steps:
      - run:
          name: "Install dependencies for docs build."
          command: |
            sudo apt-get update
            sudo apt-get install doxygen
            python3 -m venv $HOME/venv
            source $HOME/venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade wheel
            pip install --upgrade setuptools
            pip install sphinx sphinx_rtd_theme breathe

  compile-enzoe:
    description: "Compile enzo-e."
    parameters:
      usedouble:
        type: boolean
      tag:
        type: string
        default: tip
      skipfile:
        type: string
        default: notafile
      usegrackle:
        type: boolean
        default: true
      useprecompiledheaders:
        type: boolean
        default: true
      setupCTests:
        type: boolean
        default: true
        description: whether to build CTest machinery (has no effect on pytest framework)
    steps:
      - run:
          name: "Checkout target tag from enzo-e repository."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate
            if [ ! -f << parameters.skipfile >> ]; then
              git checkout << parameters.tag >>
            fi

      - run:
          name: "Compile enzo-e."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate

            # remove build directory in case we've already compiled before
            rm -rf build

            if [ ! -f << parameters.skipfile >> ]; then
              cmake -DEnzo-E_CONFIG=linux_gcc \
                    -GNinja \
                    -DUSE_DOUBLE_PREC=<< parameters.usedouble >> \
                    -DUSE_GRACKLE=<< parameters.usegrackle >> \
                    -DUSE_PRECOMPILED_HEADERS=<< parameters.useprecompiledheaders >> \
                    -DBUILD_TESTING=<< parameters.setupCTests >> \
                    -Bbuild \
                    -DPARALLEL_LAUNCHER_NPROC_ARG="++local;+p" \
                    -DPython3_FIND_VIRTUALENV=ONLY
              cmake --build build -j 4
            fi

  run-ctests:
    description: "Run the unit tests with ctest."
    parameters:
      skipfile:
        type: string
        default: notafile
    steps:
      - run:
          name: "Run the unit tests with ctest."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate

            if [ ! -f << parameters.skipfile >> ]; then
              source $HOME/venv/bin/activate
              if [[ $SKIP_TEST != 1 ]]; then
                cd build
                # Run all tests excluding VLCT, shu_collapse, and bb_test
                ctest -E "(vlct)|(shu_collapse)|(bb_test)" --output-on-failure
                # Don't run shu_collapse or bb_test since these take a long
                # time to run

                # Only run VLCT tests if using double prec (test answers aren't
                # currently defined for single prec). To check precision:
                # - query value from CMakeCache.txt
                # - make the value lower case
                # - compare against CMake's named boolean constants
                USE_DOUBLE=`grep USE_DOUBLE_PREC CMakeCache.txt | cut -d = -f 2 | tr [A-Z] [a-z]`
                if [[ "${USE_DOUBLE}" =~ ^(1|on|yes|true|y)$ ]]; then
                  ctest -R vlct --output-on-failure
                elif ! [[ "${USE_DOUBLE}" =~ ^(0|off|no|false|n|ignore|notfound)$ ]]; then
                  echo "ERROR while checking precision of enzo_float"
                  echo "USE_DOUBLE has unexpected value: ${USE_DOUBLE}"
                  exit 1
                fi

                ninja process_test_results
              fi
            fi

  run-answer-tests:
    description: "Run the answer tests with pytest."
    parameters:
      usedouble:
        type: boolean
        default: false
      usegrackle:
        type: boolean
        default: false
      generate:
        type: boolean
        default: false
    steps:
      - run:
          name: "Run answer tests."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate

            # do a little setup based on the value of usegrackle:
            # 1. convert the parameter to an env var storing 0 or 1
            # 2. if that variable holds true, export GRACKLE_INPUT_DATA_DIR
            USE_GRACKLE=$(( 0 <<# parameters.usegrackle >> + 1 <</ parameters.usegrackle >> ))
            if [[ $USE_GRACKLE == 1 ]]; then
              export GRACKLE_INPUT_DATA_DIR="$HOME/grackle/grackle_data_files/input/"
            fi

            export USE_DOUBLE=<< parameters.usedouble >>
            export GENERATE_TEST_RESULTS=<< parameters.generate >>
            pytest test/answer_tests

  build-docs:
    description: "Test the docs build."
    steps:
      - run:
          name: "Test the docs build."
          command: |
            source $HOME/venv/bin/activate
            cd doc/source
            python -m sphinx -M html "." "_build" -W

jobs:
  test-suite:
    parameters:
      usedouble:
        type: boolean
      usegrackle:
        type: boolean
      testframework:
        default: "neither"
        type: enum
        description: Specifies which sets of tests to run. Must be one of "neither", "ctest", "pytest".
        enum: ["neither", "ctest", "pytest"]

    docker:
      - image: cimg/python:3.10

    resource_class: large

    working_directory: ~/enzo-e

    steps:
      - checkout
      - set-env
      - install-dependencies # (handles caching of dependencies too)

      - when:
          condition: << parameters.usegrackle >>
          steps:
            - install-grackle:
                usedouble: << parameters.usedouble >>

      - when:
          condition:
            equal: [ pytest, << parameters.testframework >> ]
          steps:
            - run: echo "starting steps for pytest answer generation"
            - compile-enzoe:
                usedouble: << parameters.usedouble >>
                tag: gold-standard-005
                skipfile: notafile
                usegrackle: << parameters.usegrackle >>
            - run-answer-tests:
                usedouble: << parameters.usedouble >>
                usegrackle: << parameters.usegrackle >>
                generate: true
            - run: echo "Completed steps for pytest answer generation"

      - compile-enzoe:
          usedouble: << parameters.usedouble >>
          tag: tip
          skipfile: notafile
          usegrackle: << parameters.usegrackle >>
          setupCTests: true

      - when:
          condition:
            equal: [ pytest, << parameters.testframework >> ]
          steps:
            - run-answer-tests:
                usedouble: << parameters.usedouble >>
                usegrackle: << parameters.usegrackle >>
                generate: false
            - run:
                name:  PostFailure Verfication that answer-tests pass when compared to answers generated by the same version
                when: on_fail
                command: |
                  # even if this step succeeds, the entire job will fail since
                  # the previous step failed

                  echo "Following the failure of answer tests, we now confirm "
                  echo "that the pytest code itself works in the currently "
                  echo "checked out branch. We do this by regenerating the "
                  echo "answer-test answers and confirming that the the tests "
                  echo "pass while using those same answers"

                  # we might want to factor out the following logic (and the
                  # previous step into an external bash script since their's a
                  # lot of reused code... There's no other way to do this while
                  # having this test run on failure...)
                  #
                  # Alternatively, after we merge PR #318, we should be able to
                  # significantly simplify these 2 steps

                  source $BASH_ENV
                  source $HOME/venv/bin/activate

                  # do a little setup based on the value of usegrackle:
                  # 1. convert the parameter to an env var storing 0 or 1
                  # 2. if that var holds true, export GRACKLE_INPUT_DATA_DIR
                  USE_GRACKLE=$(( 0 <<# parameters.usegrackle >> + 1 <</ parameters.usegrackle >> ))
                  if [[ $USE_GRACKLE == 1 ]]; then
                    export GRACKLE_INPUT_DATA_DIR="$HOME/grackle/grackle_data_files/input/"
                  fi

                  export TEST_RESULTS_DIR="~/enzoe_test_results-selfconsistency"
                  export USE_DOUBLE=<< parameters.usedouble >>

                  echo "generate the test results"
                  export GENERATE_TEST_RESULTS="true"
                  pytest test/answer_tests
                  if [ $? -ne 0 ]; then exit 1; fi

                  echo "rerunning the answer tests, & comparing against newly generated results"
                  export GENERATE_TEST_RESULTS="false"
                  pytest test/answer_tests

      - when:
         condition:
            equal: [ ctest, << parameters.testframework >> ]
         steps:
            - run-ctests:
                skipfile: notafile

# the following case considers a few IMPORTANT compilation configurations
# 1. no-grackle
# 2. no-precompiled-headers
  extra-compile-tests:
    parameters:
      usedouble:
        type: boolean

    docker:
      - image: cimg/python:3.10

    resource_class: large

    working_directory: ~/enzo-e

    steps:
      - checkout
      - set-env
      - install-dependencies # (handles caching of dependencies too)

      - run: echo "About to test compilation without grackle!"

      - compile-enzoe:
          usedouble: << parameters.usedouble >>
          tag: tip
          skipfile: notafile
          useprecompiledheaders: true
          usegrackle: false
          setupCTests: false

      - run: echo "About to test compilation without precompiled headers"

      - install-grackle:
          usedouble: true

      - compile-enzoe:
          usedouble: << parameters.usedouble >>
          tag: tip
          skipfile: notafile
          useprecompiledheaders: false
          usegrackle: true
          setupCTests: false

      # in the future, it may be worth considering running a test-suite here... But for now,
      # this job is only intended to check whether things successfully compile

  docs-build:
    docker:
      - image: cimg/python:3.10

    working_directory: ~/enzo-e

    steps:
      - checkout
      - install-docs-dependencies
      - build-docs

workflows:
   tests:
     jobs:
       - test-suite:
           name: ctest-suite_single-prec
           usedouble: false
           usegrackle: true
           testframework: "ctest"
       - test-suite:
           name: ctest-suite_double-prec
           usedouble: true
           usegrackle: true
           testframework: "ctest"
       - test-suite:
           name: answer-tests_single
           usedouble: false
           usegrackle: true
           testframework: "pytest"
       - test-suite:
           name: answer-tests_double
           usedouble: true
           usegrackle: true
           testframework: "pytest"
       - docs-build
       - extra-compile-tests:
           usedouble: true

