version: 2.1

commands:
  set-env:
    description: "Set environment variables."
    steps:
      - run:
          name: "Set environment variables."
          command: |
            echo 'export CHARM_VER=6.10.2' >> $BASH_ENV
            echo 'export LD_LIBRARY_PATH=$HOME/local/lib:$LD_LIBRARY_PATH' >> $BASH_ENV
            echo 'export CELLO_ARCH=linux_gnu' >> $BASH_ENV
            echo 'export CHARM_ARGS=++local' >> $BASH_ENV
            echo 'export HDF5_INC=/usr/include/hdf5/serial' >> $BASH_ENV
            echo 'export HDF5_LIB=/usr/lib/x86_64-linux-gnu' >> $BASH_ENV
            echo 'export CHARM_HOME=$HOME/local/charm-v$CHARM_VER' >> $BASH_ENV
            echo 'export GRACKLE_HOME=$HOME/local' >> $BASH_ENV
            # tag the tip so we can go back to it
            git tag tip

  install-dependencies:
    description: "Install dependencies."
    steps:
      - run:
          name: "Install dependencies."
          command: |
            source $BASH_ENV
            sudo apt-get update
            sudo apt-get install -y bc csh libhdf5-serial-dev gfortran libtool-bin libpapi-dev libpng-dev libboost-all-dev
            # apt-get installs hdf5 libraries with _serial
            sudo ln -s /usr/lib/x86_64-linux-gnu/libhdf5_serial.so /usr/lib/x86_64-linux-gnu/libhdf5.so
            # Install charm++
            mkdir -p $HOME/local
            if [ ! -f $HOME/local/charm-v$CHARM_VER/bin/charmrun ]; then
              cd $HOME/local
              wget http://charm.cs.illinois.edu/distrib/charm-$CHARM_VER.tar.gz
              tar xvfz charm-$CHARM_VER.tar.gz
              rm charm-$CHARM_VER.tar.gz
              cd charm-v$CHARM_VER
              ./build charm++ netlrts-linux-x86_64 -j4 --with-production
            fi
            # prepare testing dependencies
            python3 -m venv $HOME/venv
            source $HOME/venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade wheel
            pip install --upgrade setuptools
            pip install Cython numpy h5py matplotlib==3.3.3 libconf yt==3.6.1

  install-grackle:
    description: "Install grackle."
    steps:
      - run:
          name: "Install grackle."
          command: |
            git clone -b master https://github.com/grackle-project/grackle $HOME/grackle
            cd $HOME/grackle
            ./configure
            cd src/clib
            make machine-linux-gnu
            make
            make install

  install-docs-dependencies:
    description: "Install dependencies for docs build."
    steps:
      - run:
          name: "Install dependencies for docs build."
          command: |
            sudo apt-get update
            python3 -m venv $HOME/venv
            source $HOME/venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade wheel
            pip install --upgrade setuptools
            pip install sphinx sphinx_rtd_theme

  build-and-test:
    description: "Compile enzo-e and run tests."
    parameters:
      prec:
        type: string
      tag:
        type: string
        default: tip
      skipfile:
        type: string
        default: notafile
    steps:
      - run:
          name: "Compile enzo-e and run tests."
          command: |
            source $BASH_ENV
            if [ ! -f << parameters.skipfile >> ]; then
              git checkout << parameters.tag >>
              export CELLO_PREC=<< parameters.prec >>
              make
              source $HOME/venv/bin/activate
              # the following environment variable indicates that the parallel
              # vlct test(s) are to be skipped
              export VL_PARALLEL_TEST_IP_CHARM=0
              make test
            fi

  build-docs:
    description: "Test the docs build."
    steps:
      - run:
          name: "Test the docs build."
          command: |
            source $HOME/venv/bin/activate
            cd doc/source
            python -m sphinx -M html "." "_build" -W

jobs:
  test-suite:
    parameters:
      prec:
        type: string

    docker:
      - image: cimg/python:3.7

    working_directory: ~/enzo-e

    steps:
      - checkout
      - set-env

      - restore_cache:
          name: "Restore dependencies cache."
          key: dependencies-v1

      - install-dependencies

      - save_cache:
          name: "Save dependencies cache"
          key: dependencies-v1
          paths:
            - ~/local

      - install-grackle

      - build-and-test:
          prec: << parameters.prec >>
          tag: tip
          skipfile: notafile

  docs-build:
    docker:
      - image: circleci/python:3.7.2

    working_directory: ~/enzo-e

    steps:
      - checkout
      - install-docs-dependencies
      - build-docs

workflows:
   tests:
     jobs:
       - test-suite:
           prec: single
       - test-suite:
           prec: double
       - docs-build
