version: 2.1

commands:
  set-env:
    description: "Set environment variables."
    steps:
      - run:
          name: "Set environment variables."
          command: |
            echo 'export CHARM_VER=6.10.2' >> $BASH_ENV
            echo 'export LD_LIBRARY_PATH=$HOME/local/lib:$LD_LIBRARY_PATH' >> $BASH_ENV
            echo 'export CELLO_ARCH=linux_gnu' >> $BASH_ENV
            echo 'export CELLO_BUILD_NCORE=4' >> $BASH_ENV
            echo 'export CHARM_ARGS=++local' >> $BASH_ENV
            echo 'export HDF5_INC=/usr/include/hdf5/serial' >> $BASH_ENV
            echo 'export HDF5_LIB=/usr/lib/x86_64-linux-gnu' >> $BASH_ENV
            echo 'export CHARM_HOME=$HOME/local/charm-v$CHARM_VER' >> $BASH_ENV
            echo 'export GRACKLE_HOME=$HOME/local' >> $BASH_ENV
            echo 'export GRACKLE_INPUT_DATA_DIR=$HOME/grackle/grackle_data_files/input/' >> $BASH_ENV
            # tag the tip so we can go back to it
            git tag tip

  install-dependencies:
    description: "Install dependencies."
    steps:
      - run:
          name: "Install dependencies."
          command: |
            source $BASH_ENV
            sudo apt-get update
            sudo apt-get install -y bc csh libhdf5-serial-dev gfortran libtool-bin libpapi-dev libpng-dev libboost-all-dev 
            # apt-get installs hdf5 libraries with _serial
            sudo ln -s /usr/lib/x86_64-linux-gnu/libhdf5_serial.so /usr/lib/x86_64-linux-gnu/libhdf5.so
            # install scons
            python3 -m venv $HOME/venv
            source $HOME/venv/bin/activate
            pip install --upgrade pip
            pip install scons
            # Install charm++
            mkdir -p $HOME/local
            if [ ! -f $HOME/local/charm-v$CHARM_VER/bin/charmrun ]; then
              cd $HOME/local
              wget http://charm.cs.illinois.edu/distrib/charm-$CHARM_VER.tar.gz
              tar xvfz charm-$CHARM_VER.tar.gz
              rm charm-$CHARM_VER.tar.gz
              cd charm-v$CHARM_VER
              ./build charm++ netlrts-linux-x86_64 -j4 --with-production
            fi
            # prepare testing dependencies
            # hdf5-tools is necessary for h5diff which is used by testing
            sudo apt-get install -y hdf5-tools
            python3 -m venv $HOME/venv
            source $HOME/venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade wheel
            pip install --upgrade setuptools
            pip install Cython numpy h5py matplotlib==3.3.3 libconf yt==3.6.1

  install-grackle:
    description: "Install grackle."
    parameters:
      prec:
        type: string

    steps:
      - run:
          name: "Install grackle."
          command: |
            git clone -b master https://github.com/grackle-project/grackle $HOME/grackle
            cd $HOME/grackle
            ./configure
            cd src/clib
            make machine-linux-gnu
            if [ << parameters.prec >> == "single" ]; then
              make precision-32
            fi
            make
            make install
            # the grackle_data_files submodule is necessary for testing
            cd ../..
            git submodule update --init

  install-docs-dependencies:
    description: "Install dependencies for docs build."
    steps:
      - run:
          name: "Install dependencies for docs build."
          command: |
            sudo apt-get update
            python3 -m venv $HOME/venv
            source $HOME/venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade wheel
            pip install --upgrade setuptools
            pip install sphinx sphinx_rtd_theme

  configure-build-system:
    description: "Modifies the SConstruct file to use grackle or not."
    parameters:
      usegrackle:
        type: boolean
        default: true
    steps:
      - run:
          name: "Modify the use_grackle parameter in SConstruct."
          command: |
            # convert boolean parameter to an env var storing 0 or 1
            USE_GRACKLE=$(( 0 <<# parameters.usegrackle >> + 1 <</ parameters.usegrackle >> ))

            source $BASH_ENV
            # to help make sure that this doesn't fall through the cracks if
            # parts of the build system change, check the validity of the default
            # value of the use_grackle parameter
            DFLT_GRACKLE_VAL=$(sed -n 's/^use_grackle *= *//p' SConstruct)
            if [[ "$DFLT_GRACKLE_VAL" != "0" && "$DFLT_GRACKLE_VAL" != "1" ]];
            then
                echo "The \"use_grackle\" parameter in SConstruct has an unexpected value"
                exit 1;
            fi
            # now update SConstruct so that "use_grackle" is given the value of $USE_GRACKLE
            sed -i "s/^use_grackle *=.*/use_grackle = ${USE_GRACKLE}/" SConstruct

  build-and-test:
    description: "Compile enzo-e and run tests."
    parameters:
      prec:
        type: string
      tag:
        type: string
        default: tip
      skipfile:
        type: string
        default: notafile
      usegrackle:
        type: boolean
        default: true
      skiptest:
        type: boolean
        default: false
    steps:
      - run:
          name: "Checkout target tag from enzo-e repository."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate
            if [ ! -f << parameters.skipfile >> ]; then
              git checkout << parameters.tag >>
            fi

      - configure-build-system:
          usegrackle: << parameters.usegrackle >>

      - run:
          name: "Compile enzo-e and run tests."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate

            # convert boolean parameter to an env var storing 0 or 1
            SKIP_TEST=$(( 0 <<# parameters.skiptest >> + 1 <</ parameters.skiptest >> ))

            if [ ! -f << parameters.skipfile >> ]; then
              export CELLO_PREC=<< parameters.prec >>
              make
              source $HOME/venv/bin/activate
              if [[ $SKIP_TEST != 1 ]]; then
                 # the following environment variable indicates that the
                 # parallel VL+CT test(s) are to be skipped
                 export VL_PARALLEL_TEST_IP_CHARM=0
                 make test
              fi
            fi

  build-docs:
    description: "Test the docs build."
    steps:
      - run:
          name: "Test the docs build."
          command: |
            source $HOME/venv/bin/activate
            cd doc/source
            python -m sphinx -M html "." "_build" -W

jobs:
  test-suite:
    parameters:
      prec:
        type: string
      usegrackle:
        type: boolean
      skiptest:
        type: boolean

    docker:
      - image: cimg/python:3.7

    working_directory: ~/enzo-e

    steps:
      - checkout
      - set-env

      - restore_cache:
          name: "Restore dependencies cache."
          key: dependencies-v2

      - install-dependencies

      - save_cache:
          name: "Save dependencies cache"
          key: dependencies-v2
          paths:
            - ~/local

      - when:
          condition: << parameters.usegrackle >>
          steps:
            - install-grackle:
                prec: << parameters.prec >>

      - build-and-test:
          prec: << parameters.prec >>
          tag: tip
          skipfile: notafile
          usegrackle: << parameters.usegrackle >>
          skiptest: << parameters.skiptest >>

  docs-build:
    docker:
      - image: circleci/python:3.7.2

    working_directory: ~/enzo-e

    steps:
      - checkout
      - install-docs-dependencies
      - build-docs

workflows:
   tests:
     jobs:
       - test-suite:
           name: test-suite_single-prec
           prec: single
           usegrackle: true
           skiptest: false
       - test-suite:
           name: test-suite_double-prec
           prec: double
           usegrackle: true
           skiptest: false
       - docs-build
       - test-suite:
           name: build-no-grackle
           prec: double
           usegrackle: false
           skiptest: true
