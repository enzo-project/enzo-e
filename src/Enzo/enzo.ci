// See LICENSE_CELLO file for license and copyright information

/// @file     enzo.ci
/// @author   James Bordner (jobordner@ucsd.edu)
/// @date     2011-03-24
/// @brief    CHARM++ Enzo process group

module enzo {

  initnode void register_method_turbulence(void);
  initnode void mutex_init();
  initnode void mutex_init_bcg_iter();

  readonly int EnzoMsgCheck::counter[CONFIG_NODE_SIZE];

  readonly EnzoConfig g_enzo_config;

  PUPable EnzoBoundary;
  PUPable EnzoConfig;
  PUPable EnzoFactory;

  // ALWAYS define the following (even if CONFIG_USE_GRACKLE is not defined)
  PUPable GrackleFacade;

  // EnzoInitial
#ifdef CONFIG_USE_GRACKLE
  PUPable EnzoInitialGrackleTest;
#endif
  PUPable EnzoInitialAccretionTest;
  PUPable EnzoInitialBBTest;
  PUPable EnzoInitialBCenter;
  PUPable EnzoInitialBurkertBodenheimer;
  PUPable EnzoInitialCloud;
  PUPable EnzoInitialCollapse;
  PUPable EnzoInitialCosmology;
  PUPable EnzoInitialFeedbackTest;
  PUPable EnzoInitialHdf5;
  PUPable EnzoInitialImplosion2;
  PUPable EnzoInitialInclinedWave;
  PUPable EnzoInitialIsolatedGalaxy;
  PUPable EnzoInitialMergeSinksTest;
  PUPable EnzoInitialMusic;
  PUPable EnzoInitialPm;
  PUPable EnzoInitialPpmlTest;
  PUPable EnzoInitialSedovArray2;
  PUPable EnzoInitialSedovArray3;
  PUPable EnzoInitialSedovRandom;
  PUPable EnzoInitialShockTube;
  PUPable EnzoInitialShuCollapse;
  PUPable EnzoInitialSoup;
  PUPable EnzoInitialTurbulence;

  PUPable IoEnzoBlock;

  // EnzoRefine
  PUPable EnzoRefineMass;
  PUPable EnzoRefineParticleMass;
  PUPable EnzoRefineShock;

  // EnzoCompute
  PUPable EnzoComputeCoolingTime;
  PUPable EnzoComputePressure;
  PUPable EnzoComputeTemperature;
  PUPable EnzoComputeAcceleration;
  PUPable EnzoComputeCicInterp;

  // EnzoMatrix
  PUPable EnzoMatrixLaplace;
  PUPable EnzoMatrixDiagonal;
  PUPable EnzoMatrixIdentity;

  // EnzoMethod
  PUPable EnzoMethodGrackle;
  PUPable EnzoMethodAccretion;
  PUPable EnzoMethodBackgroundAcceleration;
  PUPable EnzoMethodBondiHoyleAccretion;
  PUPable EnzoMethodCheck;
  PUPable EnzoMethodComovingExpansion;
  PUPable EnzoMethodCosmology;
  PUPable EnzoMethodDistributedFeedback;
  PUPable EnzoMethodFeedback;
  PUPable EnzoMethodFeedbackSTARSS;
  PUPable EnzoMethodM1Closure;
  PUPable EnzoMethodFluxAccretion;
  PUPable EnzoMethodGravity;
  PUPable EnzoMethodHeat;
  PUPable EnzoMethodMergeSinks;
  PUPable EnzoMethodMHDVlct;
  PUPable EnzoMethodPmDeposit;
  PUPable EnzoMethodPmUpdate;
  PUPable EnzoMethodPpm;
  PUPable EnzoMethodPpml;
  PUPable EnzoMethodBalance;
  PUPable EnzoMethodSinkMaker;
  PUPable EnzoMethodThresholdAccretion;
  PUPable EnzoMethodTurbulence;

  PUPable EnzoMethodStarMaker;
  PUPable EnzoMethodStarMakerStochasticSF;
  PUPable EnzoMethodStarMakerSTARSS;

  PUPable EnzoPhysicsCosmology;
  PUPable EnzoPhysicsFluidProps;
  PUPable EnzoPhysicsGravity;

  PUPable EnzoProblem;
  PUPable EnzoProlong;
  PUPable EnzoProlongMC1;
  PUPable EnzoProlongPoisson;

  PUPable EnzoRestrict;

  PUPable EnzoSolverCg;
  PUPable EnzoSolverDd;
  PUPable EnzoSolverDiagonal;
  PUPable EnzoSolverBiCgStab;
  PUPable EnzoSolverMg0;
  PUPable EnzoSolverJacobi;

  PUPable EnzoStopping;

  PUPable EnzoUnits;

  message EnzoMsgCheck;

  extern module mesh;

  readonly CProxy_EnzoSimulation proxy_enzo_simulation;
  readonly CProxy_IoEnzoReader   proxy_io_enzo_reader;
  readonly CProxy_IoEnzoWriter   proxy_io_enzo_writer;

  //----------------------------------------------------------------------

  group [migratable] EnzoSimulation : Simulation {

    entry EnzoSimulation (const char filename[n], int n);

    entry void r_startup_begun (CkReductionMsg *);

    entry void p_refine_create_block (MsgRefine *);

    //EnzoMethodBalance
    entry void r_method_balance_count(CkReductionMsg * msg);
    entry void p_method_balance_check();

    // EnzoMethodCheck
    entry void r_method_check_enter(CkReductionMsg *);
    entry void p_check_done();
    entry void p_set_io_writer(CProxy_IoEnzoWriter proxy);

    // enzo_control_restart
    entry void p_set_io_reader(CProxy_IoEnzoReader proxy);
    entry void p_io_reader_created();
    entry void p_restart_next_level();
    entry void p_restart_level_created();
  };

  //----------------------------------------------------------------------
  array[Index] EnzoBlock : Block {

    entry EnzoBlock (process_type ip_source, MsgType msg_type);

    entry EnzoBlock();

    // EnzoMethodFeedbackSTARSS synchronization entry methods
    entry void p_method_feedback_starss_end();

    // EnzoMethodM1Closure synchronization entry methods
    entry void p_method_m1_closure_solve_transport_eqn();
    entry void p_method_m1_closure_set_global_averages(CkReductionMsg *msg);

    // EnzoMethodTurbulence synchronization entry methods
    entry void r_method_turbulence_end(CkReductionMsg *msg);

    entry void p_initial_hdf5_recv(MsgInitial * msg_initial);

    // EnzoMethodBalance
    entry void p_method_balance_migrate();
    entry void p_method_balance_done();

    // EnzoMethodGravity synchronization entry methods
    entry void p_method_gravity_continue();
    entry void p_method_gravity_end();

    // checkpoint
    entry void p_check_write_first
      (int num_files, std::string ordering, std::string name_dir);
    entry void p_check_write_next (int num_files, std::string ordering);
    entry void p_check_done();

    // restart
    entry void p_restart_refine (int ic3[3], int io_reader, int ip);
    entry void p_restart_set_data(EnzoMsgCheck *);
    entry void p_restart_done();

    // EnzoMethodAccretion synchronization entry methods
    entry void p_method_accretion_end();

    // EnzoSolverCg synchronization entry methods

    entry void p_solver_cg_matvec();
    entry void r_solver_cg_loop_0a(CkReductionMsg *msg);
    entry void r_solver_cg_loop_0b(CkReductionMsg *msg);
    entry void r_solver_cg_shift_1(CkReductionMsg *msg);
    entry void p_solver_cg_loop_2();
    entry void r_solver_cg_loop_3(CkReductionMsg *msg);
    entry void r_solver_cg_loop_5(CkReductionMsg *msg);

    // EnzoSolverBiCGStab post-reduction entry methods

    entry void r_solver_bicgstab_start_1(CkReductionMsg *msg);
    entry void r_solver_bicgstab_start_3(CkReductionMsg *msg);
    entry void r_solver_bicgstab_loop_5(CkReductionMsg *msg);
    entry void r_solver_bicgstab_loop_11(CkReductionMsg *msg);
    entry void r_solver_bicgstab_loop_13(CkReductionMsg *msg);
    entry void r_solver_bicgstab_loop_15(CkReductionMsg *msg);

    entry void p_solver_bicgstab_loop_2();
    entry void p_solver_bicgstab_loop_3();
    entry void p_solver_bicgstab_loop_8();
    entry void p_solver_bicgstab_loop_9();

    entry void p_dot_recv_parent(int n, long double dot[n],
				 std::vector<int> isa,
				 int i_function, int iter);
    entry void p_dot_recv_children(int n, long double dot[n],
				   std::vector<int> isa,
				   int i_function);

    // EnzoSolverDd

    entry void p_solver_dd_restrict_recv(FieldMsg * msg);
    entry void p_solver_dd_prolong_recv(FieldMsg * msg);
    entry void p_solver_dd_solve_coarse();
    entry void p_solver_dd_solve_domain();
    entry void p_solver_dd_last_smooth();
    entry void r_solver_dd_barrier(CkReductionMsg *msg);
    entry void r_solver_dd_end(CkReductionMsg *msg);

    // EnzoSolverJacobi

    entry void p_solver_jacobi_continue();

    // EnzoSolverMg0

    entry void p_solver_mg0_restrict();
    entry void p_solver_mg0_solve_coarse();
    entry void p_solver_mg0_post_smooth();
    entry void p_solver_mg0_last_smooth();
    entry void r_solver_mg0_begin_solve(CkReductionMsg *msg);
    entry void r_solver_mg0_barrier(CkReductionMsg* msg);
    entry void p_solver_mg0_prolong_recv(FieldMsg * msg);
    entry void p_solver_mg0_restrict_recv(FieldMsg * msg);
  };

  array[1D] IoEnzoReader : IoReader {
    entry IoEnzoReader();
    entry void p_init_root(std::string, std::string, int level);
    entry void p_create_level(int level);
    entry void p_init_level(int level);
    entry void p_block_created();
    entry void p_block_ready();
  };

  array[1D] IoEnzoWriter : IoWriter {
    entry IoEnzoWriter();
    entry IoEnzoWriter (int num_files, std::string ordering,
                        int monitor_iter, int include_ghosts);
    entry void p_write(EnzoMsgCheck * );
  };

};
