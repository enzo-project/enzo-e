#------------------------------
# IMPORTS
#------------------------------

Import('env')
Import('use_papi')
Import('use_grackle')
Import('use_jemalloc')
Import('grackle_path')

Import('bin_path')
Import('inc_path')
Import('lib_path')

#------------------------------
# DEPENDENCIES
#------------------------------

components = []

components.append(['enzo','charm','simulation','problem', 'compute',
	      'array', 'control', 'mesh', 'data', 'io', 'disk', 'memory', 
	      'parameters', 
	      'error', 'monitor', 'parallel','performance',
	      'test','cello','external'])

if (use_papi):
	components.append(['papi'])


components.append(['hdf5','z','dl'])

libraries_external  = ['png','$FORTRANLIBS', 'boost_filesystem', 'boost_system']

if (use_jemalloc):
   libraries_external.append([ 'jemalloc' ])

includes_enzo = [Glob('*enzo*hpp'),'fortran.h', 'fortran_types.h']

if (use_grackle):   libraries_external.append('grackle')

#------------------------------
# SOURCE
#------------------------------

sources  = [Glob('enzo*cpp'),
    	    'calcdiss.F',
	    'calc_dt.F',
	    'calc_eigen.F',
	    'cic_deposit.F',
	    'cic_interp.F',
	    'cicinterp.F',
	    'euler.F',
	    'expand_terms.F',
	    'flux_hll.F',
	    'flux_twoshock.F',
	    'grid_cic.F',
	    'interp1d.F',
	    'interp2d.F',
	    'interp3d.F',
	    'interpolate.F',
	    'inteuler.F',
	    'int_lin3d.F',
	    'intpos.F',
	    'intprim.F',
	    'intvar.F',
	    'ngpinterp.F',
	    'pgas2d_dual.F',
    	    'pgas2d_dual.F',
	    'pgas2d.F',
	    'ppm_de.F',
	    'PPML_Conservative.F',
	    'PPML_HLLD.F',
	    'PPML_MAIN.F',
	    'PPML_monot.F',
	    'PPML_potokx.F',
	    'PPML_potoky.F',
	    'PPML_potokz.F',
	    'PPML_Primitive.F',
	    'PPML_sub.F',
	    'PPML_TimeStep.F',
	    'print_slice.F',
	    'tscint1d.F',
	    'tscint2d.F',
	    'tscint3d.F',
	    'turboinit2d.F',
	    'turboinit.F',
	    'twoshock.F',
	    'woc_calcdiss.F',
	    'woc_calc_eigen.F',
	    'woc_cic_deposit.F',
	    'woc_euler.F',
	    'woc_flux_hllc.F',
	    'woc_flux_hll.F',
	    'woc_flux_twoshock.F',
	    'woc_inteuler.F',
	    'woc_intpos.F',
	    'woc_intprim.F',
	    'woc_intvar.F',
	    'woc_pgas2d_dual.F',
	    'woc_pgas2d.F',
	    'woc_twoshock.F',
	    'xeuler_sweep.F',
	    'yeuler_sweep.F',
	    'zeuler_sweep.F']


charm_main = []
includes_enzo.append(['enzo.decl.h','enzo.def.h'])
charm_main = ['../Cello/main_enzo.cpp']

#------------------------------
# ENVIRONMENTS
#------------------------------

env = env.Clone(LIBS=[components,libraries_external])

#------------------------------
# TARGETS
#------------------------------

libraries_enzo   = env.Library ('enzo', sources)

test_enzo_e = env.Program (['enzo-e.cpp', charm_main])

test_enzo_units = env.Program (['test_EnzoUnits.cpp'])

test_enzo_prolong = env.Program (['test_Prolong.cpp', charm_main])

binaries = [test_enzo_e, test_enzo_prolong, test_enzo_units]

env.CharmBuilder(['enzo.decl.h','enzo.def.h'],'enzo.ci',ARG = 'enzo')
env.CppBuilder('enzo.ci','enzo.CI',ARG = 'enzo')

#------------------------------
# INSTALL
#------------------------------

env.Alias('install-bin',env.Install (bin_path,binaries))
env.Alias('install-bin',env.Install ('#/bin/',binaries))

env.Alias('install-inc',env.Install (inc_path,includes_enzo))
env.Alias('install-lib',env.Install (lib_path,libraries_enzo))



