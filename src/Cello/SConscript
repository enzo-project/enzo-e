#------------------------------
# DIRECTORIES
#------------------------------

#------------------------------
# IMPORTS
#------------------------------

Import('env')

Import('bin_path')
Import('inc_path')
Import('lib_path')

Import('use_papi')
Import('cxxflags')

#------------------------------
# DEPENDENCIES
#------------------------------

# Direct Dependencies
# array -> error

# disk -> error

# error -> monitor

# field -> error
# field -> mesh [LOOP]

# io -> error
# io -> field

# memory -> error

# mesh  -> disk
# mesh -> field [LOOP]
# mesh -> io
# mesh -> parallel
# mesh -> simulation (CHARM)

# monitor -> performance

# parallel -> error

# parameters -> error

# performance -> error

# test_* -> test

if (use_papi):
   libs_papi = ['papi']
else:
   libs_papi = []

libs_boost = ['boost_filesystem', 'boost_system']

libs_external    = ['external']
libs_monitor     = ['monitor','parallel'] + libs_boost
libs_error       = ['error'] + libs_monitor + libs_boost
libs_disk        = ['disk'] + libs_error + ['hdf5'] + ['cello']
libs_performance = ['performance', 'memory','parameters'] + libs_error + libs_papi + libs_boost
libs_array       = ['array'] + libs_error
libs_parallel    = ['parallel'] +libs_error
libs_data        = ['mesh', 'data', 'io'] + libs_parallel + ['cello']
libs_main        = ['main']
libs_memory      = ['memory'] + libs_error + libs_boost
libs_mesh        = ['mesh','data','io','disk'] + libs_parallel + libs_external + ['cello','png','hdf5'] + libs_boost
libs_io          = ['io'] + libs_mesh
libs_parameters  = ['parameters'] + libs_error + libs_boost + ['cello']

libs_simulation  = ['simulation','problem']
libs_test        = ['test'] + libs_parallel + ['cello', 'data', 'simulation']

libs_all = ['charm','control','simulation','compute','data','mesh','problem','io','disk','memory','parallel','parameters','error','monitor','performance','test','array','cello','external','png','hdf5'] + libs_papi + libs_boost
libs_data   = libs_all
libs_io     = libs_all
libs_mesh   = libs_all




# libraries_cello  = ['png','$FORTRANLIBS','m']

# libraries_data  = ['png','hdf5']
# libraries_io  = ['png','hdf5']
#libraries_method  = []
#libraries_performance = []
#libraries_simulation = ['$FORTRANLIBS']
#libraries_test = []


#------------------------------
# SOURCE
#------------------------------

includes_cello =       [Glob('cello*hpp')]
includes_charm =       [Glob('charm*hpp')]
includes_control =     [Glob('*control*hpp')]
includes_disk =        [Glob('*disk*hpp')]
includes_error =       [Glob('*error*hpp')]
includes_data =        [Glob('*data*hpp')]
includes_io =          [Glob('*io*hpp')]
includes_main =        ['main.hpp']
includes_memory =      [Glob('*memory*hpp')]
includes_mesh =        [Glob('*mesh*hpp')]
includes_monitor =     [Glob('*monitor*hpp')]
includes_parallel =    [Glob('*parallel*hpp'),'parallel.def']
includes_parameters =  [Glob('*parameters*hpp'),'parse.h']
includes_performance = [Glob('*performance*hpp')]
includes_problem     = [Glob('*problem*hpp')]
includes_compute     = [Glob('*compute*hpp')]
includes_array       = [Glob('*array*hpp')]
includes_simulation =  [Glob('*simulation*hpp')]
includes_test =        [Glob('*test*hpp')]

sources_cello =       [Glob('cello*cpp')]
sources_charm =       [Glob('charm*cpp')]
sources_control =     [Glob('control*cpp')]
sources_disk =        [Glob('disk*cpp')]
sources_error =       [Glob('error*cpp')]
sources_data =        [Glob('data_*cpp')]
sources_data0 =        [Glob('data0_*cpp')]
sources_io =          [Glob('io*cpp')]
sources_main =        [Glob('main*cpp')]
sources_memory =      [Glob('memory*cpp')]
sources_mesh =        [Glob('mesh*cpp')]
sources_monitor =     [Glob('monitor*cpp')]
sources_parallel =    [Glob('parallel*cpp')]
sources_parameters =  [Glob('parameters*cpp'),'parse.tab.c','lex.yy.c']
sources_performance = [Glob('performance*cpp')]
sources_problem =     [Glob("problem*cpp")]
sources_compute =     [Glob("compute*cpp")]
sources_array =       [Glob("array*cpp")]
sources_simulation =  [Glob("simulation*cpp")]
sources_test =        [Glob('test_Unit*cpp')]

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# WHEN parse.y or parse.l change:
# 1. Uncomment below
# 2. scons install-bin
# 3. cp build/Cello/lex.yy.c src/Cello
# 4. cp build/Cello/parse.tab.? src/Cello
# 5. Recomment below
# NOTE: requires 'flex' and 'bison'
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# env.CFile(target = 'lex.yy.c', source = 'parse.l')
# env.CFile(target = ['parse.tab.c', 'parse.tab.h'], source = 'parse.y', YACCFLAGS='-d -t')
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


env.CharmBuilder(['main_enzo.decl.h','main_enzo.def.h'],
	'main_enzo.ci',ARG = 'main_enzo')
env.CppBuilder('main_enzo.ci','main_enzo.CI',ARG = 'main_enzo')
Depends('main_enzo.ci','main_include.h')

env.CharmBuilder(['main.decl.h','main.def.h'],
	'main.ci',ARG = 'main')
env.CppBuilder('main.ci','main.CI',ARG = 'main')
Depends('main.ci','main_include.h')

env.CharmBuilder (['main_simulation.decl.h','main_simulation.def.h'],
        'main_simulation.ci', ARG = 'main_simulation')
env.CppBuilder('main_simulation.ci','main_simulation.CI',ARG = 'main_simulation')
Depends('main_simulation.ci','main_include.h')

env.CharmBuilder(['main_mesh.decl.h','main_mesh.def.h'],
	'main_mesh.ci',ARG = 'main_mesh')
env.CppBuilder('main_mesh.ci','main_mesh.CI',ARG = 'main_mesh')
Depends('main_mesh.ci','main_include.h')

env.CharmBuilder(['mesh.decl.h','mesh.def.h'],
	'mesh.ci',ARG = 'mesh')
env.CppBuilder('mesh.ci','mesh.CI',ARG = 'mesh')

env.CharmBuilder(['simulation.decl.h','simulation.def.h'],
	'simulation.ci',ARG='simulation')
env.CppBuilder('simulation.ci','simulation.CI',ARG = 'mesh')

includes_main.append(['main_include.h'])
includes_main.append(['main_enzo.decl.h','main_enzo.def.h'])
includes_main.append(['main.decl.h','main.def.h'])
includes_main.append(['main_simulation.decl.h','main_simulation.def.h'])
includes_main.append(['main_mesh.decl.h','main_mesh.def.h'])
includes_mesh.append(['mesh.decl.h','mesh.def.h'])
includes_simulation.append(['simulation.decl.h','simulation.def.h'])

#------------------------------
# ENVIRONMENTS
#------------------------------

#------------------------------
# TARGETS
#------------------------------


sources_disk.append(['main.cpp'])
sources_error.append(['main.cpp'])
sources_data.append(['main_simulation.cpp','field_face_store.F'])
sources_io.append(['main_simulation.cpp'])
sources_memory.append(["main.cpp"])
sources_mesh.append(['main_mesh.cpp'])
sources_monitor.append(["main.cpp"])
sources_parameters.append(["main.cpp"])
sources_performance.append(["main.cpp"])


objs_cello = env.Object(sources_cello)
objs_charm = env.Object(sources_charm)
objs_control = env.Object(sources_control)
objs_disk = env.Object(sources_disk)
objs_error = env.Object(sources_error)
objs_data3 = env.Object(sources_data)
env0=env.Clone(CXXFLAGS=cxxflags.replace('O3','O0'))

objs_data0=env0.Object(sources_data0);
objs_data=[objs_data0,objs_data3]
objs_io = env.Object(sources_io)
objs_main = env.Object(sources_main)
objs_memory = env.Object(sources_memory)
objs_mesh  = env.Object(sources_mesh)
objs_monitor = env.Object(sources_monitor)
objs_parallel = env.Object(sources_parallel)
objs_parameters = env.Object(sources_parameters)
objs_performance = env.Object(sources_performance)
objs_problem = env.Object(sources_problem)
objs_compute = env.Object(sources_compute)
objs_array = env.Object(sources_array)
objs_simulation = env.Object(sources_simulation)
objs_test = env.Object(sources_test)


test_FileHdf5     = env.Program ('test_FileHdf5.cpp',   LIBS=[libs_disk,  libs_test])
test_error        = env.Program ('test_Error.cpp',      LIBS=[libs_error, libs_test])


test_colormap    = env.Program (['test_Colormap.cpp', objs_io],
                                 LIBS=[libs_io,    libs_test]) 
test_particle  = env.Program (['test_Particle.cpp', objs_data, objs_data0],    
                                 LIBS=[libs_data, libs_test])

test_scalar_data  = env.Program (['test_Scalar.cpp', objs_data],
                                 LIBS=[libs_data, libs_test])
test_field_data  = env.Program (['test_FieldData.cpp', objs_data],
                                 LIBS=[libs_data, libs_test])
test_field_descr  = env.Program (['test_FieldDescr.cpp', objs_data], 
                                 LIBS=[libs_data, libs_test])
test_field        = env.Program (['test_Field.cpp', objs_data],
                                 LIBS=[libs_data, libs_test])
test_field_face   = env.Program (['test_FieldFace.cpp', objs_data],  
                                 LIBS=[libs_data, libs_test])
test_grouping  = env.Program (['test_Grouping.cpp', objs_data], 
                                 LIBS=[libs_data, libs_test])
test_it_index     = env.Program (['test_ItIndex.cpp', objs_data],    
                                 LIBS=[libs_data, libs_test])
test_it_node      = env.Program (['test_ItNode.cpp', objs_mesh],
                                 LIBS=[libs_mesh,  libs_test])
test_data        = env.Program (['test_Data.cpp', objs_mesh],
                                 LIBS=[libs_mesh,  libs_test])
test_it_face     = env.Program (['test_ItFace.cpp', objs_mesh],
                                 LIBS=[libs_mesh, libs_test]) 
test_it_child     = env.Program (['test_ItChild.cpp', objs_mesh],
                                 LIBS=[libs_mesh, libs_test]) 
test_block_trace        = env.Program (['test_BlockTrace.cpp',objs_mesh],
                                 LIBS=[libs_mesh,  libs_test])
test_tree         = env.Program (['test_Tree.cpp',objs_mesh],
                                 LIBS=[libs_mesh,  libs_test])
test_tree_density = env.Program (['test_TreeDensity.cpp',objs_mesh],
                                 LIBS=[libs_mesh,  libs_test])
test_sync         = env.Program (['test_Sync.cpp',objs_mesh],
                                 LIBS=[libs_mesh,  libs_test])
test_node         = env.Program (['test_Node.cpp',objs_mesh],
                                 LIBS=[libs_mesh,  libs_test])
test_node_trace   = env.Program (['test_NodeTrace.cpp',objs_mesh],
                                 LIBS=[libs_mesh,  libs_test])
test_class_size   = env.Program (['test_class_size.cpp',objs_mesh],
                                 LIBS=[libs_mesh,  libs_test])
test_index        = env.Program (['test_Index.cpp',objs_mesh],
                                 LIBS=[libs_mesh,  libs_test])
test_face         = env.Program (['test_Face.cpp',objs_mesh],
                                 LIBS=[libs_mesh,  libs_test])
test_face_fluxes   = env.Program (['test_FaceFluxes.cpp',objs_mesh],
                                 LIBS=[libs_mesh,  libs_test])
test_flux_data     = env.Program (['test_FluxData.cpp',objs_mesh],
                                 LIBS=[libs_mesh,  libs_test])
test_prolong_linear = env.Program (['test_ProlongLinear.cpp',objs_mesh],
                                 LIBS=[libs_mesh,  libs_test])
test_schedule     = env.Program (['test_Schedule.cpp', objs_io],
                                 LIBS=[libs_io,    libs_test]) 
test_refresh      = env.Program (['test_Refresh.cpp', objs_mesh],
                                 LIBS=[libs_mesh, libs_test])
test_type         = env.Program (['test_Type.cpp', objs_mesh],
                                 LIBS=[libs_mesh, libs_test])
test_mask         = env.Program (['test_Mask.cpp', objs_mesh],
                                 LIBS=[libs_mesh,  libs_test])
test_value        = env.Program (['test_Value.cpp', objs_mesh],
                                 LIBS=[libs_mesh,  libs_test])
test_box        = env.Program (['test_Box.cpp', objs_mesh],
                                 LIBS=[libs_mesh,  libs_test])
test_adapt        = env.Program (['test_Adapt.cpp', objs_mesh],
                                 LIBS=[libs_mesh,  libs_test])

test_memory       = env.Program ('test_Memory.cpp',     LIBS=[libs_memory, libs_test])
test_monitor      = env.Program ('test_Monitor.cpp',    LIBS=[libs_monitor,libs_test])

test_parameters   = env.Program ('test_Parameters.cpp',  LIBS=[libs_parameters,libs_test])
test_parse        = env.Program ('test_Parse.cpp',       LIBS=[libs_parameters,libs_test])

test_performance = env.Program('test_Performance.cpp',  
                               LIBS=[libs_performance,libs_test])
test_timer = env.Program('test_Timer.cpp',  
                               LIBS=[libs_performance,libs_test])
test_papi        = env.Program('test_Papi.cpp',          
                               LIBS=[libs_performance,libs_test])

test_celloarray  = env.Program('test_CelloArray.cpp',
                               LIBS=[libs_array,libs_test])

libraries_charm   = env.Library ('charm',   objs_charm)
libraries_control = env.Library ('control', objs_control)
libraries_disk   = env.Library ('disk',   objs_disk)
libraries_error  = env.Library ('error',  objs_error)
libraries_data  = env.Library ('data',  objs_data)
libraries_io     = env.Library ('io',     objs_io)
libraries_main   = env.Library ('main',   objs_main)
libraries_memory = env.Library ('memory', objs_memory)
libraries_mesh   = env.Library ('mesh',   objs_mesh)
libraries_monitor = env.Library ('monitor', objs_monitor)
libraries_problem = env.Library ('problem', objs_problem)
libraries_compute = env.Library ('compute', objs_compute)
libraries_array = env.Library('array', objs_array)
libraries_parallel = env.Library ('parallel', objs_parallel)
libraries_parameters = env.Library ('parameters', objs_parameters)
libraries_performance = env.Library ('performance', objs_performance)

libraries_simulation = env.Library ('simulation', objs_simulation)
libraries_test  = env.Library ('test', objs_test)


binaries_cello = [test_type, test_class_size]

binaries_array = [test_celloarray]
binaries_disk  = [test_FileHdf5]
binaries_error = [test_error]
binaries_data = [test_scalar_data,
                 test_field_data,
                  test_field_descr,
                  test_field,
                  test_grouping,
                  test_field_face,
                  test_it_index,
		  test_particle]
binaries_problem = [test_mask,test_value,test_refresh,test_box]
binaries_io    = [test_colormap]
binaries_memory  = [test_memory]
binaries_mesh = [ test_data,test_block_trace,test_tree,test_tree_density,test_sync,test_node,test_node_trace,test_it_node,test_index,test_face,test_face_fluxes,test_flux_data,test_prolong_linear,test_schedule,test_it_face,test_it_child,test_adapt]
binaries_monitor = [test_monitor]

objs_parallel.append(["main.cpp"])

binaries_parameters = [test_parameters, test_parse]
binaries_performance = [test_performance,test_papi,test_timer]
#--------------------------------------------------

#------------------------------
# INSTALL
#------------------------------

lib_cello = env.Library ('cello', objs_cello)

env.Alias('install-bin',env.Install (bin_path,binaries_cello))
env.Alias('install-inc',env.Install (inc_path,includes_cello))
env.Alias('install-lib',env.Install (lib_path,lib_cello))

env.Alias('install-inc',env.Install (inc_path,includes_charm))
env.Alias('install-lib',env.Install (lib_path,libraries_charm))

env.Alias('install-inc',env.Install (inc_path,includes_control))
env.Alias('install-lib',env.Install (lib_path,libraries_control))

env.Alias('install-bin',env.Install (bin_path,binaries_array))
env.Alias('install-inc',env.Install (inc_path,includes_array))
env.Alias('install-lib',env.Install (lib_path,libraries_array))

env.Alias('install-bin',env.Install (bin_path,binaries_disk))
env.Alias('install-inc',env.Install (inc_path,includes_disk))
env.Alias('install-lib',env.Install (lib_path,libraries_disk))

env.Alias('install-bin',env.Install (bin_path,binaries_error))
env.Alias('install-inc',env.Install (inc_path,includes_error))
env.Alias('install-lib',env.Install (lib_path,libraries_error))

env.Alias('install-bin',env.Install (bin_path,binaries_data))
env.Alias('install-inc',env.Install (inc_path,includes_data))
env.Alias('install-lib',env.Install (lib_path,libraries_data))

env.Alias('install-bin',env.Install (bin_path,binaries_io))
env.Alias('install-inc',env.Install (inc_path,includes_io))
env.Alias('install-lib',env.Install (lib_path,libraries_io))

env.Alias('install-inc',env.Install (inc_path,includes_main))
env.Alias('install-lib',env.Install (lib_path,libraries_main))

env.Alias('install-bin',env.Install (bin_path,binaries_memory))
env.Alias('install-inc',env.Install (inc_path,includes_memory))
env.Alias('install-lib',env.Install (lib_path,libraries_memory))

env.Alias('install-bin',env.Install (bin_path,binaries_mesh))
env.Alias('install-inc',env.Install (inc_path,includes_mesh))
env.Alias('install-lib',env.Install (lib_path,libraries_mesh))

env.Alias('install-bin',env.Install (bin_path,binaries_monitor))
env.Alias('install-inc',env.Install (inc_path,includes_monitor))
env.Alias('install-lib',env.Install (lib_path,libraries_monitor))

env.Alias('install-inc',env.Install (inc_path,includes_parallel))
env.Alias('install-lib',env.Install (lib_path,libraries_parallel))

env.Alias('install-bin',env.Install (bin_path,binaries_parameters))
env.Alias('install-inc',env.Install (inc_path,includes_parameters))
env.Alias('install-lib',env.Install (lib_path,libraries_parameters))

env.Alias('install-bin',env.Install (bin_path,binaries_performance))
env.Alias('install-inc',env.Install (inc_path,includes_performance))
env.Alias('install-lib',env.Install (lib_path,libraries_performance))

env.Alias('install-bin',env.Install (bin_path,binaries_problem))
env.Alias('install-inc',env.Install (inc_path,includes_problem))
env.Alias('install-lib',env.Install (lib_path,libraries_problem))

env.Alias('install-inc',env.Install (inc_path,includes_compute))
env.Alias('install-lib',env.Install (lib_path,libraries_compute))

env.Alias('install-inc',env.Install (inc_path,includes_simulation))
env.Alias('install-lib',env.Install (lib_path,libraries_simulation))

env.Alias('install-inc',env.Install (inc_path,includes_test))
env.Alias('install-lib',env.Install (lib_path,libraries_test))
