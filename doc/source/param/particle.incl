----

.. par:parameter:: Particle:list

   :Summary: :s:`List of particle types`
   :Type:    :par:typefmt:`list ( string )`
   :Default: :d:`[]`
   :Scope:     :c:`Cello`

   :e:`Cello allows arbitrary parameter types (dark matter particles, tracer particles, star particles, etc.), each with arbitrary attributes (position, velocity, etc.).  The` :p:`list` :e:`parameter defines which types of particles to use.`

     ::

       Particle {

           list = ["dark", "trace"];

       }

----

.. par:parameter:: Particle:batch_size

   :Summary: :s:`Number of particles in a "batch" of particles`
   :Type:    :par:typefmt:`integer`
   :Default: :d:`1024`
   :Scope:     :c:`Cello`

   :e:`Particles are allocated and operated on in` *batches*.  :e:`The number of particles in a batch is set using the` :p:`batch_size` :e:`parameter.  The default batch size is 1024.`

----

.. par:parameter:: Particle:particle_type:attributes

   :Summary: :s:`List of attribute names and data types`
   :Type:    :par:typefmt:`list ( string )`
   :Default: :d:`none`
   :Scope:     :c:`Cello`

   :e:`Each particle type can have multiple attributes of varying types, which are defined by the` :p:`attributes` :e:`parameter.  The` :p:`attributes` :e:`parameter is a list of strings, alternating between the name of the parameter, and its type.  Names may include` :t:`"position_x"`, :t:`"velocity_z"`, :t:`"mass"`,
   :t:`"id"`, :e:`etc.  Types may include` :t:`"single"`, :t:`"double"`, :t:`"quadruple"`, :t:`"int8"`, :t:`"int16"`, :t:`"int32"`, or :t:`"int64"`.  :e:`Ordering of attributes in memory is as in the` :p:`attributes` :e:`parameter.`

      ::

       Parameter {

           list = ["trace", "dark"];

               trace {

                   attributes = ["id", "int64",
                                 "x",  "single",
                                 "y",  "single",
                                 "z",  "single"];
                }

                dark {

                    attributes = ["id",         "int64",
                                  "mass",       "double",
                                  "velocity_x", "single",
                                  "velocity_y", "single",
                                  "velocity_z", "single",
                                  "position_x", "int16",
                                  "position_y", "int16",
                                  "position_z", "int16"];
              }
         }

   :e:`Note that when attributes of multiple sizes are included in the same parameter type, it can be helpful to order the attributes so that larger-sized attributes are listed first, followed by smaller-sized attributes.  This can help prevent allocating more memory than necessary, since attributes may be padded with unused bytes for correct memory alignment.`

----

.. par:parameter:: Particle:particle_type:interleaved

   :Summary: :s:`Format of output files`
   :Type:    :par:typefmt:`logical`
   :Default: :d:`false`
   :Scope:     :c:`Cello`

   :e:`Particle attributes within a batch of particles may be stored in memory either particle-by-particle, or "interleaved" (attribute-by-attribute).  If` |aij| :e:`represents the jth attribute of particle i, then with` :p:`interleaved = false`, :e:`attributes would be stored as` |a00| ... |am0|, |a01| ... |am1| ... |a0n| ... |amn|. :e:`If, however,` :p:`interleaved = true`, :e:`then attributes would be stored as`   |a00| ... |a0n|, |a10| ... |a1n| ... |am0| ... |amn|. :e:`Non-interleaved particle attributes have array accesses of stride 1 and minimal storage overhead, but may not utilize cache well.  Interleaved particle attributes` *may* :e:`have improved cache utilization, but will have stride > 1, and may require memory padding for correct alignment of attributes in memory.  The default is` :t:`false.`



----

.. par:parameter:: Particle:particle_type:group_list

   :Summary: :s:`Specify a list of groups that the Particle type belongs to`
   :Type:    :par:typefmt:`list ( string )`
   :Default: :d:`[ ]`
   :Scope:     :c:`Cello`


   :e:`Different Particle types may belong to any number of different "groups", which allows simulation code to loop over multiple related particle types.`

     ::

       Particle {
           list = ["trace","dark","star"];

           dark { group_list = ["is_gravitating"]; }
           star { group_list = ["is_gravitating"]; }
       }


   :e:`This example can be rewritten as follows, which is completely equivalent:`

     ::


       Particle 
           list = ["trace","dark","star"];
       }

       Group {
           list = ["is_gravitating"];
           is_gravitating {
              particle_list = ["dark","star"];
           }
       }

----

.. par:parameter:: Particle:particle_type:position

   :Summary: :s:`Format of output files`
   :Type:    :par:typefmt:`string`
   :Default: :d:`""`
   :Scope:     :c:`Cello`

   :e:`Cello needs to know which particle attributes represent position, so that it can determine when particles migrate out of a Block and need to be moved to a neighboring Block.  This is done using the` :p:`position` :e:`parameter:`

     ::

       Particle {

          list = ["trace"];

          trace {

             attributes = ["id",
                           "x","single",
   	                "y","single",
   	                "z","single"];

             position = ["x","y","z"];
          }
       }

----

.. par:parameter:: Particle:particle_type:velocity

   :Summary: :s:`Format of output files`
   :Type:    :par:typefmt:`string`
   :Default: :d:`""`
   :Scope:     :c:`Cello`

   :e:`Enzo may need to know which particle attributes represent velocity, for example for kick() or drift() operations.  This is done using the` :p:`velocity` :e:`parameter, whose usage is analogous to the` :p:`position` :e:`parameter.  While specifying position is required, specifying velocity is optional.`

     ::

       Particle {

          list = ["dark"];

          trace {

             attributes = [ "x","single",   "y","single",   "z","single",
                           "vx","single",  "vy","single",  "vz","single",
   			"mass","single"];

             velocity = ["vx","vy","vz"];
          }
       }


----

.. par:parameter:: Particle:mass_is_mass

   :Summary: :s:`Flag for whether particle masses should be handled as a quantity with dimensions of mass.`
   :Type:    :par:typefmt:`any`
   :Default: :d:`none`
   :Scope:     :c:`Cello`

   This parameter is not used by Enzo-E, but is rather used by yt to indicate whether particle "mass" should be treated as a quantity with dimensions of mass. If this parameter is absent, then
   "mass" is treated as a quantity with dimensions of density, which has a value equal to the true mass divided by the root level cell volume. The value of this parameter is not used: yt only checks
   whether this parameter is present, however, it must have some value which can be read in by yt. It is recommended to set the velue to be "true".

----

-----------
Performance
-----------

.. par:parameter:: Performance:warnings

   :Summary: :s:`Whether to output performance-related warnings`
   :Type:    :par:typefmt:`logical`
   :Default: :d:`true`
   :Scope:     :c:`Cello`

   :e:`If calls to the Performance API are incorrect, e.g. if stop_region() is called on a region that has not been started, then this parameter specifies whether or not to display warning messages`

----

.. par:parameter:: Performance:papi:counters

   :Summary: :s:`List of PAPI counters`
   :Type:    :par:typefmt:`list ( string )`
   :Default: :d:`[]`
   :Scope:     :c:`Cello`

   :e:`List of PAPI hardware performance counters to trace, e.g. 'counters = ["PAPI_FP_OPS", "PAPI_L3_TCA"];'.  For a list of available counters, use the PAPI "papi_avail" utility.`

