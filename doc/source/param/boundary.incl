----

.. par:parameter:: Boundary:list

   :Summary:    :s:`List of boundary condition subgroups`
   :Type:    :par:typefmt:`[ string | list ( string ) ]`
   :Default: :d:`[]`
   :Scope:     :c:`Cello`

   :e:`For mixed boundary conditions, the` :p:`list` :e:`parameter specifies the list of names of subgroups that define boundary conditions on each portion of the domain boundary.  Boundary conditions in each subgroup are applied in the order listed.  In the example below, two subgroups` :t:`"one"` :e:`and` :t:`"two"` :e:`are defined, which specify reflecting boundary conditions along the x-axis and outflow boundary conditions along the y-axis:`

     ::

          Boundary {
             list = ["one", "two"];
             one {
                type = "reflecting";
                axis = "x";
             }
             two {
                type = "outflow";
                axis = "y";
             }
          }

----

.. par:parameter:: Boundary:<condition>:type

   :Summary:    :s:`Type of boundary condition`
   :Type:    :par:typefmt:`string`
   :Default: :d:`"undefined"`
   :Scope:     :c:`Cello`

   :e:`Boundary conditions in Enzo-E include` :t:`"reflecting"` :e:`,` :t:`"outflow"` :e:`,` :t:`"inflow"` :e:`, and` :t:`"periodic"`.  :e:`Other boundary condition types can be implemented by either a) modifying the existing` :p:`EnzoBoundary` :e:`class or b) creating a new class inherited from the` :p:`Boundary` :e:`base class.`

   :t:`"inflow"` :e:`boundary conditions additionally require the` :par:param:`~Boundary:<condition>:value` :e:`parameter or subgroup and, in certain cases, the` :par:param:`~Boundary:<condition>:field_list` :e:`parameter.`

----

.. par:parameter:: Boundary:<condition>:axis

   :Summary:    :s:`Axis along which boundary conditions are to be enforced`
   :Type:    :par:typefmt:`string`
   :Default: :d:`"all"`
   :Scope:     :c:`Cello`

   :e:`The`  :p:`axis` :e:`parameter restricts the boundary conditions to the face orthogonal to the specified axis.`  :p:`axis` :e:`must be` :t:`"x"` , :t:`"y"` , :t:`"z"` :e:`or` :t:`"all"`.  :e:`The` :p:`axis` :e:`parameter may be used in conjunction with the` :p:`face` :e:`parameter, or by itself.`


----

.. par:parameter:: Boundary:<condition>:face

   :Summary:    :s:`Face along which boundary conditions are to be enforced`
   :Type:    :par:typefmt:`string`
   :Default: :d:`"all"`
   :Scope:     :c:`Cello`

   :e:`The` :p:`face` :e:`parameter can restrict the boundary conditions to be applied only to the` :p:`upper` :e:`or` :p:`lower` :e:`faces.  face orthogonal to the given face.`  :p:`face` :e:`must be` :t:`"upper"` , :t:`"lower"` :e:`or` :t:`"all"`.  :e:`The` :p:`face` :e:`parameter may be used in conjunction with the` :p:`axis` :e:`parameter, or by itself.`

----

.. par:parameter:: Boundary:<condition>:mask

   :Summary:    :s:`Subregion in which boundary conditions are to be enforced`
   :Type:    :par:typefmt:`logical-expr`
   :Default: :d:`none`
   :Scope:     :c:`Cello`

   :e:`The`  :p:`mask` :e:`parameter specifies the subregion of the boundary on which to apply the boundary conditions.  The logical expression  may be a function of x, y, z, and t, and boundary conditions are restricted to where (and when) it evaluates to true`::

          Boundary {
             ...
             OUT {
                type = "outflow";
                mask = (x >= 4.0) || 
                       (y >= 1.0 && (x >= 0.744017 + 11.547* t));
             }
          }


----

.. par:parameter:: Boundary:<condition>:value

   :Summary:    :s:`Value for inflow boundary conditions`
   :Type:    :par:typefmt:`float`
   :Type:    :par:typefmt:`float-expr`
   :Type:    :par:typefmt:`list ( float-expr [, logical-expr, float-expr [, ... ] ] )`
   :Default: :d:`[]`
   :Scope:     :c:`Cello`

   :e:`For` :p:`inflow` :e:`type boundary conditions, there are 2 ways to specify field values. In both cases, the parameter(s) are assigned "value-expressions", which may be of type` :par:typefmt:`float`, :par:typefmt:`float-expr`, :e:`or a list of alternating` :par:typefmt:`float-expr` :e:`and` :par:typefmt:`logical-expr` :e:`types. Both` :par:typefmt:`float-expr` :e:`and` :par:typefmt:`logical-expr` :e:`may be functions of x, y, z, and t.  When a list is specified, the` :par:typefmt:`logical-expr` :e:`is treated as a mask, similar to an 'if-then-else' clause.`

   :e:`The two approaches include:`

     1. :e:`Under the historic approach,` :par:param:`!Boundary:<condition>:value` :e:`is a parameter that is directly assigned a "value-expression". This "value-expression" specifies the value enforced by this boundary for all fields in the` :par:param:`~Boundary:<condition>:field_list` :e:`parameter.`

        ::

            Boundary {
               ...
               VELOCITY_Y {
                  type = "inflow";
                  field_list = "velocity_y";
                  value = [ -8.25*0.5,
                             ((x <= 0.166667) && (y <= 0.0) ) ||
                              (x <= 0.0) ||
                              ((x < 0.744017 + 11.547*t) && (y >= 1.0)),
                             0.0
                          ];
               }
            }

     2. :e:`Under the second approach,` :par:param:`!Boundary:<condition>:value` :e:`is a parameter-subgroup. Within the parameter-subgroup, "value-expressions" are assigned to parameters that are named after the fields that the "value-expressions" apply to. Under this approach, it is an error for the` :par:param:`~Boundary:<condition>:field_list` :e:`parameter to be specified. This approach bears a lot of similarities to the way values are specified in the` :ref:`"value" problem initializer. <value-initializer-param-ref>`

        ::

            Boundary {
               ...
               x_upstream {
                  type = "inflow";
                  axis = "x";
                  face = "lower";
                  value {
                     density    = [ 0.1, (y <= 0.5), 0.1 * (y - 0.5) ];
                     velocity_x = 10.0;
                     velocity_y = 0.0;
                     velocity_z = 0.0;
                     total_energy = 75.0;
                  }
               }
            }

----

.. par:parameter:: Boundary:<condition>:field_list

   :Summary: :s:`List of fields to apply boundary conditions to`
   :Type:    :par:typefmt:`list ( string )`
   :Default: :d:`[]`
   :Scope:     :c:`Cello`

   :e:`The` :par:param:`!field_list` :e:`parameter is used to restrict boundary conditions to the specified fields.  An empty list, which is the default, is used to specify all fields.`
