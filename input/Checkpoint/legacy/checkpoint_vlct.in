# Problem: Legacy-Checkpoint-Restart VL+CT (Hydro-ONLY)
# Author: Matthew Abruzzo
#
# This is an input file for testing the legacy checkpoint-restart machinery
# that is based on the charm++ machinery.
#
# In more detail, this mostly acts like a template-file that is used by the
# testing tool. In practice, the testing tool will:
# - provide a Stopping section and an Output section.
# - use the contents of Field:list to determine which fields to compare before
#   and after a restart
# Details are provided on the website documentation about how you can see the
# full parameter files that are generated in this test.
#
# NOTE: we may want to tweak this to look at a MHD wave in the future

   Domain {
      lower = [0.0, 0.0, 0.0];
      upper = [1.0, 0.5, 0.5];
   }

   Boundary {
      type = "periodic";
   }

   Mesh {
      root_rank = 3; # 3D
      root_blocks = [2,2,2];
      root_size = [16,8,8]; # number of cells per axis
   }

   Method {
      list = ["mhd_vlct"];
      mhd_vlct{
         courant = 0.4;
         mhd_choice = "no_bfield";
         riemann_solver = "hllc";
         time_scheme = "vl";
         reconstruct_method = "plm";
         theta_limiter = 2.;
         };
   }

   Physics {

      list = ["fluid_props"];

      fluid_props {

         eos { gamma = 1.6666666666666667; }

         floors {
            density  = 1.0e-30;
            pressure = 1.0e-30;
         }
      }
   }

   Field {
      list = ["density", "velocity_x", "velocity_y", "velocity_z",
              "total_energy",
              "bfieldi_x", "bfieldi_y", "bfieldi_z",
              "bfield_x", "bfield_y", "bfield_z",
              "pressure"];

      ghost_depth = 3;
      padding = 0;
      alignment = 8;

      bfieldi_x{
         centering = [false, true, true];
      };
      bfieldi_y{
         centering = [true, false, true];
      };
      bfieldi_z{
         centering = [true, true, false];
      };
   }

   Group {
      list = ["derived"];
      derived {
         field_list = ["pressure"];
      }
   }


   Initial{
      list = ["inclined_wave"];

      inclined_wave{
         # the wave is aligned with the x-axis
         alpha = 0.;
         beta = 0.;

         lambda = 1.;
         amplitude = 1.e-6;
         wave_type = "sound";
      };
   }

