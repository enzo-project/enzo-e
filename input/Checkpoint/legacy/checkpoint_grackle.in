# Problem: Legacy-Checkpoint-Restart Grackle
# Author: Matthew Abruzzo
#
# This is an input file for testing the legacy checkpoint-restart machinery
# that is based on the charm++ machinery.
#
# In more detail, this mostly acts like a template-file that is used by the
# testing tool. In practice, the testing tool will:
# - provide a Stopping section and an Output section.
# - use the contents of Field:list to determine which fields to compare before
#   and after a restart
# Details are provided on the website documentation about how you can see the
# full parameter files that are generated in this test.
#
# NOTE:
# We may want to look into either consolidating this file with
# input/Grackle/method_grackle_general.in OR making this test even faster
# (by further simplifying it!)


 Boundary {
     type = "reflecting";
 }

 Domain {
     lower = [ 0.0, 0.0, 0.0];
     upper = [ 1.0, 1.0, 1.0];
 }

 Units {
    density = 1.6726219E-24;  # m_H in grams... so n = 1.0 cm^-3 for pure hydrogen
    time    = 3.15576E13;     # 1 Myr in seconds
    length  = 3.086E16;       # 1 pc in cm - does not actually matter
 }

 Physics {
      list = ["fluid_props"];
      fluid_props { eos { gamma = 1.400; } }
 }

 Field {
     alignment = 8;
     ghost_depth = 3;
     list = [ "density", 
              "internal_energy",
              "total_energy",
              "velocity_x",
              "velocity_y",
              "velocity_z",
# purposefully commenting these out to test automatic
# creation of needed fields
#              "HI_density",
#              "HII_density",
              "HM_density",
              "HeI_density",
              "HeII_density",
              "HeIII_density",
              "H2I_density",
              "H2II_density",
              "DI_density",
              "DII_density",
              "HDI_density",
              "e_density",
              "metal_density",
              "cooling_time",  
              "temperature",
              "pressure"
     ];

     padding = 0;
 }

 Group {
   list = ["color", "derived"];
   
   # fields that should be advected by hydro MUST be defined
   # as color here. This is handled automatically in 
   # EnzoMethodGrackle for the Grackle-specific fields (species)
   # but not everything
    color {
       field_list = [
# because the entries for the first 2 fields were purposefully commented out
# from Field::list, we need to comment them out here too (you can't add a
# non-existant field to a group). This is okay: when EnzoMethodGrackle creates
# these missing fields, it will automatically add them to the "color" group
#              "HI_density",
#              "HII_density",
              "HM_density",
              "HeI_density",
              "HeII_density",
              "HeIII_density",
              "H2I_density",
              "H2II_density",
              "DI_density",
              "DII_density",
              "HDI_density",
              "e_density",
              "metal_density"];
    }

# derived fields grouping enables Enzo-E to ensure
#  that all derived fields are updated prior to output
#  In order for this to work, these MUST have their own
#  compute classes.
    derived {
        field_list = ["temperature",
                      "pressure",
                      "cooling_time"];
    }
 }

 Initial {
   list = ["grackle_test"];
   grackle_test {
      # See note in "Mesh" on running in < 3D

      minimum_H_number_density = 0.0001;
      maximum_H_number_density = 1000.0;
      minimum_metallicity      = 1.0;
      maximum_metallicity      = 1.0;
      minimum_temperature      = 10.0;
      maximum_temperature      = 1.0E8;

      dt = 100.0;
   }
 }

 Mesh {
     #   This test problem varies density, temperature,
     #   and metallicity over x, y, and z dimensions 
     #   respectively. For smaller problems you can 
     #   run in 1 or 2 dimensions by changing the below
     #   accordingly and setting the min/max values in
     #   initialization to be the same. Currently cannot
     #   pick which value goes in which dimension,
     #   so 2D can only be density and temperature,
     #   1D can only vary density.
     
     root_blocks = [ 4, 4];
     root_rank = 2;
     root_size = [128, 128];

     # 3D test example:
     # root_blocks = [ 4, 4, 4];
     # root_rank = 3;
     # root_size = [32, 32, 32];

 }

 Method {
      list = [ "grackle", "null"];

     grackle {
        courant = 0.40; # meaningless unless use_cooling_timestep = true;

        data_file = "CloudyData_UVB=HM2012_shielded.h5";

        with_radiative_cooling = 1;
        primordial_chemistry   = 3;  # 1, 2, or 3
        metal_cooling          = 1;  # 0 or 1 (off/on)
        UVbackground           = 1;  # on or off
        self_shielding_method  = 3;  # 0 - 3 (0 or 3 recommended)

        HydrogenFractionByMass = 0.73;

        # set this to true to limit the maximum timestep to the product of the
        # minimum cooling/heating time and courant.
        use_cooling_timestep = false; # default is false
     }

     # use this to limit maximum timestep if grackle::use_cooling_timestep is
     # set to false and Grackle crashes due to max iteration limit - this is
     # not needed generally in a real simulation as hydro timestep will
     # be small (usually)
     null { dt = 0.5; }

 }


# The following needs to be commented out so that this file is compatible with
# the checkpoint-restart machinery
# Output {
#     list = ["data"];
#
#     data {
#         field_list = [ "density",
#              "internal_energy",
#              "total_energy",
#              "velocity_x",
#              "velocity_y",
#              "velocity_z",
#              "HI_density",
#              "HII_density",
#              "HM_density",
#              "HeI_density",
#              "HeII_density",
#              "HeIII_density",
#              "H2I_density",
#              "H2II_density",
#              "DI_density",
#              "DII_density",
#              "HDI_density",
#              "e_density",
#              "metal_density",
#              "cooling_time",
#              "temperature",
#              "pressure"];
#
#         dir   = ["GRACKLE_TEST_%03d","cycle"];
#         name = [ "method_grackle-1-%03d-%03d.h5","cycle", "proc" ];
#         schedule {
#             var = "time";
#             step = 1000.0;
#             start = 0.0;
#         }
#         type = "data";
#     }
#
# }


