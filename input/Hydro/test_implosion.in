# Problem: 2D Implosion problem using Initial:<field>:value
# Author:  James Bordner (jobordner@ucsd.edu)

   Domain { 
      lower = [0.0, 0.0];
      upper = [0.3, 0.3];
   } 

   Field {

     
     list = [
        "density",   "velocity_x",  "velocity_y",
        "total_energy", "internal_energy", "pressure"
      ] ;

      ghost_depth = 4;

      gamma = 1.4;

   }


   Mesh { 
      root_rank = 2;
      root_size = [48,48];
      root_blocks = [2,2];
   }

   Adapt {
      max_level = 4;
      list = ["SLOPE"];
      SLOPE {
         type = "slope";
	 field_list = ["density"];
	 max_refine  =10.0;
	 min_coarsen = 4.0;
      }
   }

   Method {

      list = ["ppm"];

      ppm {
         courant   = 0.8;
         diffusion   = true;
         flattening  = 3;
         steepening  = true;
         dual_energy = false;
     }
   }

include "input/flux_correct.incl"

# Initial conditions deferred to test_implosion-code.in or
# test_implosion-value.in

   Boundary { type = "reflecting"; }

   Stopping {
      time  = 2.5;
#      cycle = 2000;
   }

   Output { 

      list = ["DENSITY", "MESH"];

      DENSITY {
         type     = "image";
	 image_type = "data";
         field_list = ["density"];
	 colormap = [0.0,0.0,0.0,
                     1.0,0.0,0.0,
                     1.0,1.0,0.0,
                     1.0,1.0,1.0];
         name     = ["implosion-d-%03d.png","count"];
         schedule {
            var =  "cycle";
            step = 25;
         }
      }

      MESH {
         type = "image";
	 image_type = "mesh";
	 image_reduce_type = "max";
         colormap = [0.0, 0.0, 0.0,
                     0.0, 0.0, 1.0,
                     0.0, 1.0, 1.0,
                     0.0, 1.0, 0.0,
                     1.0, 1.0, 0.0,
                     1.0, 0.0, 0.0 ];
         name     = ["implosion-mesh-%03d.png","count"];
	 image_size = [513,513];
         schedule {
            var =  "cycle";
            step = 25;
         }
      }
   }


   Initial {

       list = ["value"];

       value {
          density      = [ 0.125,                x + y < 0.1517, 
                           1.0 ]; 
          total_energy = [ 0.14 / (0.4 * 0.125), x + y < 0.1517,
                            1.00 / (0.4 * 1.000) ]; 
          velocity_x   = 0.0; 
          velocity_y   = 0.0; 
       }
   }
