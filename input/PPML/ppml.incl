# File:    ppml.incl

# Problem: PPML test program
# Author:  James Bordner (jobordner@ucsd.edu)

   # Domain is the two dimensional box 0 < x,y < 1.0

   include "input/Domain/domain-3d-01.incl"

   # The computational mesh is a single uniform grid

   Mesh {
      root_rank = 3;
      root_size = [32,32,32];
   }

   # Field parameters include those concerning fields as a group, as
   # well as individual fields

   Field {

      ghost_depth = 4;

      list = [
         "density",
         "velox",       "veloy",       "veloz",
         "bfieldx",     "bfieldy",     "bfieldz",
         "dens_rx",
         "velox_rx",    "veloy_rx",    "veloz_rx",
          "bfieldx_rx",  "bfieldy_rx",  "bfieldz_rx",
         "dens_ry",
         "velox_ry",    "veloy_ry",    "veloz_ry",
         "bfieldx_ry",  "bfieldy_ry",  "bfieldz_ry",
         "dens_rz",
         "velox_rz",    "veloy_rz",    "veloz_rz",
         "bfieldx_rz",  "bfieldy_rz",  "bfieldz_rz"
      ] ;

      gamma = 1.0;

      padding   = 0;
      alignment = 8;
   }

   Method {

      # list of methods to apply and in what order

      list = ["ppml"];
      ppml { 
         courant   = 0.3;
      }

   }

   Initial {

       list = ["value"];

       value {
          density = [ 1.0, (x- 0.5)*(x- 0.5) +
                           (y- 0.5)*(y- 0.5) +
                           (z- 0.5)*(z- 0.5) < 0.05,
                     0.1 ]; 
          velox = 0.0; 
          veloy = 0.0; 
          veloz = 0.0; 
          bfieldx = 10.0; 
          bfieldy = 0.0; 
          bfieldz = 0.0; 

          dens_rx = 0.0; 
          velox_rx = 0.0; 
          veloy_rx = 0.0; 
          veloz_rx = 0.0; 
          bfieldx_rx = 10.0; 
          bfieldy_rx = 0.0; 
          bfieldz_rx = 0.0; 

          dens_ry = 0.0; 
          velox_ry = 0.0; 
          veloy_ry = 0.0; 
          veloz_ry = 0.0; 
          bfieldx_ry = 10.0; 
          bfieldy_ry = 0.0; 
          bfieldz_ry = 0.0; 

          dens_rz = 0.0; 
          velox_rz = 0.0; 
          veloy_rz = 0.0; 
          veloz_rz = 0.0; 
          bfieldx_rz = 10.0; 
          bfieldy_rz = 0.0; 
          bfieldz_rz = 0.0; 
       }
   }

   Boundary { type = "reflecting"; }

   Stopping {        cycle = 40;   }
   Testing {   cycle_final = 40; }

   Testing
   {
      time_final  = [0.0029466382402461,    # single-precision
                     0.00294612924335524 ]; # double-precision
      time_tolerance = 1.0e-4;
   }

   Output {

      list = ["d_x","d_y","d_z"];

      dump {
        field_list = ["density"];
        type = "data";
#        schedule { var = "cycle"; list=[0,1];}
        include "input/Schedule/schedule_cycle_2.incl"
      }

      d_x {
        field_list = ["density"];
        type = "image";
        include "input/Schedule/schedule_cycle_2.incl"
        axis = "x";
        include "input/Colormap/colormap_blackbody.incl";
	image_size = [256,256];
      }
      d_y {
        field_list = ["density"];
        type = "image";
        include "input/Schedule/schedule_cycle_2.incl"
        axis = "y";
        include "input/Colormap/colormap_blackbody.incl";
	image_size = [256,256];
      }
      d_z {
        field_list = ["density"];
        type = "image";
        include "input/Schedule/schedule_cycle_2.incl"
        axis = "z";
        include "input/Colormap/colormap_blackbody.incl";
	image_size = [256,256];
      }
   }

