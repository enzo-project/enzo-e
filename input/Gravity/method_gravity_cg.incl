#----------------------------------------------------------------------
# Problem: 2D include file for EnzoMethodGravityCg test
# Author:  James Bordner (jobordner@ucsd.edu)
#----------------------------------------------------------------------
#
# This file initializes all but the following parameters, which must be initialized by
# the parameter file including this one:
#
#    Mesh : root_blocks
#    Output : phi_png : name
#    Output : rho_png   : name
#    Output : phi_h5  : name
#    Output : rho_h5    : name
#
#----------------------------------------------------------------------

Domain {
   lower = [ -1.0, -1.0 ];
   upper = [  1.0,  1.0 ];
}

 Adapt {
     list = [ "slope" ];
     slope {
         field_list = [ "density" ];
         max_coarsen = 0.01;
         min_refine = 4.0;
         type = "slope";
     }
 }

Mesh { 
   root_rank = 2;
}

Method {
    list = ["gravity", "ppm"]; 

    gravity {
       solver = "cg";    	    
#       grav_const = 6.67384e-8;
#       grav_const = 1.0e-1;
       accumulate = false; # NOT IMPLEMENTED YET
    }

    ppm {
       diffusion   = true;
       flattening  = 3;
       steepening  = true;
       dual_energy = false;
   }
}
Solver {
   list = ["cg"];
   cg {
      type = "cg";
       iter_max = 500;
       res_tol  = 1e-3;
       monitor_iter = 0;
   }      
}

Field {
   
   list = ["density", "potential",
           "acceleration_x",
           "acceleration_y",
           "acceleration_z",
	   "total_energy",
           "velocity_x",
           "velocity_y",
           "velocity_z",
           "internal_energy",
	   "pressure",
           "B"];

   ghost_depth = 4;
   prolong = "linear";
}

Initial {

   list = ["value"];

   value {
   
      density = [ 1.0, (x)*(x) + (y)*(y) < 0.05,
                  0.1 ];

      total_energy  = [ 10.0 / (2.0/3.0 * 1.0),
                       (x)*(x) + (y)*(y) < 0.05,
                   1.0 / (2.0/3.0 * 0.1) ];
       #AP = 0.0;
       B = 0.0;
       #P = 0.0;
       #R = 0.0;
       #X = 0.0;
   }
}

Boundary {
   type = "periodic";
} 

Output {
   list = ["mesh_png", "phi_png", "rho_png", "ax_png", "ay_png", "az_png"];
    mesh_png {
	type     = "image";
	image_type  = "mesh";
	image_size = [257,257];
	image_reduce_type = "max";
        include "input/Schedule/schedule_cycle_10.incl"
	image_min = 0.0;
        include "input/Colormap/colormap_rainbow.incl"
        axis = "z";
   }
   phi_png {
     type = "image";
     image_size = [256,256];
     field_list = ["potential"];
     include "input/Schedule/schedule_cycle_10.incl"
     include "input/Colormap/colormap_blackbody.incl"
   }
   rho_png {
     type = "image";
     image_size = [256,256];
     field_list = ["density"];
     include "input/Schedule/schedule_cycle_10.incl"
     include "input/Colormap/colormap_blackbody.incl"
   }
   ax_png {
     type = "image";
     image_size = [256,256];
     field_list = ["acceleration_x"];
     include "input/Schedule/schedule_cycle_10.incl"
     include "input/Colormap/colormap_blackbody.incl"
   }
   ay_png {
     type = "image";
     image_size = [256,256];
     field_list = ["acceleration_y"];
     include "input/Schedule/schedule_cycle_10.incl"
     include "input/Colormap/colormap_blackbody.incl"
   }
   az_png {
     type = "image";
     image_size = [256,256];
     field_list = ["acceleration_z"];
     include "input/Schedule/schedule_cycle_10.incl"
     include "input/Colormap/colormap_blackbody.incl"
   }
   phi_h5 {
     type = "data";
     image_size = [256,256];
     field_list = ["potential"];
     include "input/Schedule/schedule_cycle_10.incl"
   }
   rho_h5 {
     type = "data";
     image_size = [256,256];
     field_list = ["density"];
     include "input/Schedule/schedule_cycle_10.incl"
   }
}

Stopping {
   cycle = 50;
}
