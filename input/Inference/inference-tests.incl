# This include parameter file is referenced by test parameter files
# test-inference-24[56].in
#
#

Adapt {
     list = [ "mass_baryon", "mass_dark" ];
     mass_baryon {
         field_list = [ "density" ];
         mass_type = "baryon";
         max_coarsen = 0.25;
         min_refine = 4.0;
         type = "mass";
     }
     mass_dark {
         field_list = [ "density_particle_accumulate" ];
         mass_type = "dark";
         max_coarsen = 0.25;
         min_refine = 4.0;
         type = "mass";
     }
     max_initial_level = 0;
     max_level = 6;
     min_level = -1;
 }

 Boundary { type = "periodic"; }

 Domain {
     lower = [ 0.0, 0.0, 0.0 ];
     upper = [ 1.0, 1.0, 1.0 ];
 }

 Field {
     alignment = 8;
     gamma = 1.66670;
     ghost_depth = 4;
     history = 1;
     list = [ "density", "velocity_x", "velocity_y", "velocity_z", "acceleration_x", "acceleration_y", "acceleration_z", "total_energy", "internal_energy", "pressure", "density_total", "density_particle", "density_particle_accumulate", "potential", "density_gas", "X_copy", "B" ];
     padding = 0;
 }

 Group {
     inference {
         field_list = [ "density", "internal_energy", "total_energy" ];
     }
     list += [ "inference" ];
 }

 Initial {
     hdf5 {
         FD {
             coords = "tzyx";
             dataset = "GridDensity";
             file = "input/cosmo_grid_density.h5";
             name = "density";
             type = "field";
         }
         FVX {
             coords = "tzyx";
             dataset = "GridVelocities_x";
             file = "input/cosmo_grid_velocities_x.h5";
             name = "velocity_x";
             type = "field";
         }
         FVY {
             coords = "tzyx";
             dataset = "GridVelocities_y";
             file = "input/cosmo_grid_velocities_y.h5";
             name = "velocity_y";
             type = "field";
         }
         FVZ {
             dataset = "GridVelocities_z";
             file = "input/cosmo_grid_velocities_z.h5";
             name = "velocity_z";
             type = "field";
         }
         PDX {
             attribute = "x";
             coords = "tzyx";
             dataset = "ParticleDisplacements_x";
             file = "input/cosmo_particle_displacements_x.h5";
             name = "dark";
             type = "particle";
         }
         PDY {
             attribute = "y";
             coords = "tzyx";
             dataset = "ParticleDisplacements_y";
             file = "input/cosmo_particle_displacements_y.h5";
             name = "dark";
             type = "particle";
         }
         PDZ {
             attribute = "z";
             dataset = "ParticleDisplacements_z";
             file = "input/cosmo_particle_displacements_z.h5";
             name = "dark";
             type = "particle";
         }
         PVX {
             attribute = "vx";
             coords = "tzyx";
             dataset = "ParticleVelocities_x";
             file = "input/cosmo_particle_velocities_x.h5";
             name = "dark";
             type = "particle";
         }
         PVY {
             attribute = "vy";
             coords = "tzyx";
             dataset = "ParticleVelocities_y";
             file = "input/cosmo_particle_velocities_y.h5";
             name = "dark";
             type = "particle";
         }
         PVZ {
             attribute = "vz";
             dataset = "ParticleVelocities_z";
             file = "input/cosmo_particle_velocities_z.h5";
             name = "dark";
             type = "particle";
         }
         file_list = [ "FD", "FVX", "FVY", "FVZ", "PDX", "PDY", "PDZ", "PVX", "PVY", "PVZ" ];
         format = "music";
         monitor_iter = 1;
     }
     list = [ "hdf5", "cosmology" ];
     new = true;
 }

 Mesh {
     root_blocks = [ 2, 2, 2 ];
     root_rank = 3;
     root_size = [ 32, 32, 32 ];
 }
 Method {
     list = [ "ppm", "pm_deposit", "gravity", "pm_update",
              "comoving_expansion", "inference" ];
     ppm {
         courant = 0.5;
         diffusion = false;
         dual_energy = true;
     }
     gravity {
         accumulate = true;
         order = 2;
         solver = "dd";
     }
     inference {
         level_base  = 2;
         level_array = 4;
         array_dims = [ 32, 32, 32 ];
         field_group = "inference";
         overdensity_threshold = 3.0;
         schedule { var = "cycle";  step = 20; }
     }
 }

 Output {

     list = [ "ax", "ay", "dark", "de", "po", "mesh" ];

     ax {
         dir = [ "Inf245_%04d", "cycle" ];
         field_list = [ "acceleration_x" ];
         image_size = [ 1024, 1024 ];
         image_type = "data";
         name = [ "ax-%02d.png", "count" ];
         schedule { var = "cycle"; step = 20; }
         type = "image";
     }
     ay {
         dir = [ "Inf245_%04d", "cycle" ];
         field_list = [ "acceleration_y" ];
         image_size = [ 1024, 1024 ];
         image_type = "data";
         name = [ "ay-%02d.png", "count" ];
         schedule { var = "cycle"; step = 20; }
         type = "image";
     }
     dark {
         dir = [ "Inf245_%04d", "cycle" ];
         image_size = [ 1024, 1024 ];
         image_type = "data";
         name = [ "dark-%02d.png", "count" ];
         particle_list = [ "dark" ];
         schedule { var = "cycle"; step = 20; }
         type = "image";
     }
     de {
         dir = [ "Inf245_%04d", "cycle" ];
         field_list = [ "density" ];
         image_size = [ 1024, 1024 ];
         image_type = "data";
         name = [ "de-%02d.png", "count" ];
         schedule { var = "cycle"; step = 20; }
         type = "image";
     }
     mesh {
         colormap = [ 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0 ];
         dir = [ "Inf245_%04d", "cycle" ];
         image_reduce_type = "max";
         image_size = [ 513, 513 ];
         image_type = "mesh";
         name = [ "mesh-%02d.png", "count" ];
         schedule { var = "cycle"; step = 20; }
         type = "image";
     }
     po {
         dir = [ "Inf245_%04d", "cycle" ];
         field_list = [ "potential" ];
         image_size = [ 1024, 1024 ];
         image_type = "data";
         name = [ "po-%02d.png", "count" ];
         schedule { var = "cycle"; step = 20; }
         type = "image";
     }
 }

 Particle {
     dark {
         attributes = [ "x", "default",
                        "y", "default",
                        "z", "default",
                        "vx", "default",
                        "vy", "default",
                        "vz", "default",
                        "ax", "default",
                        "ay", "default",
                        "az", "default",
                        "is_local", "default" ];
         constants = [ "mass", "default", 2.644856770833435e-05 ];
         group_list = [ "is_gravitating" ];
         mass_is_mass = true;
         position = [ "x", "y", "z" ];
         velocity = [ "vx", "vy", "vz" ];
     }
     list = [ "dark" ];
 }

 Physics {
     cosmology {
         comoving_box_size = 1.50;
         final_redshift = 3.0;
         hubble_constant_now = 0.7;
         initial_redshift = 99.0;
         max_expansion_rate = 0.0150;
         omega_baryon_now = 0.04;
         omega_cdm_now = 0.260;
         omega_lambda_now = 0.7;
         omega_matter_now = 0.3;
     }
     list = [ "cosmology" ];
 }

 Solver {
     list = [ "dd", "dd_root", "dd_domain", "dd_smooth", "root_coarse", "root_pre", "root_post" ];
#     list = [ "bcg" ];
     bcg {
         iter_max = 1000;
         monitor_iter = 10;
         res_tol = 0.05;
         type = "bicgstab";
     }
     dd {
         coarse_level = 0;
         coarse_solve = "dd_root";
         domain_solve = "dd_domain";
         last_smooth = "dd_smooth";
         max_level = 6;
         min_level = -1;
         monitor_iter = 1;
         type = "dd";
     }
     dd_domain {
         coarse_level = 0;
         iter_max = 1000;
         max_level = 6;
         min_level = 0;
         monitor_iter = 0;
         res_tol = 0.05;
         solve_type = "tree";
         type = "bicgstab";
     }
     dd_root {
         coarse_level = -1;
         coarse_solve = "root_coarse";
         iter_max = 2;
         max_level = 0;
         min_level = -1;
         monitor_iter = 1;
         post_smooth = "root_post";
         pre_smooth = "root_pre";
         res_tol = 0.05;
         solve_type = "level";
         type = "mg0";
     }
     dd_smooth {
         iter_max = 1;
         monitor_iter = 1;
         solve_type = "leaf";
         type = "jacobi";
     }
     root_coarse {
         iter_max = 100;
         monitor_iter = 0;
         res_tol = 0.01;
         solve_type = "block";
         type = "cg";
     }
     root_post {
         iter_max = 2;
         solve_type = "level";
         type = "jacobi";
     }
     root_pre {
         iter_max = 2;
         solve_type = "level";
         type = "jacobi";
     }
 }

 Stopping {
     cycle = 301;
 }
